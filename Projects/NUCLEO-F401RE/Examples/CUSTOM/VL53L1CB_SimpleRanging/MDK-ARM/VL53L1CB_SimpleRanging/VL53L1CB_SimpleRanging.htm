<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [VL53L1CB_SimpleRanging\VL53L1CB_SimpleRanging.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image VL53L1CB_SimpleRanging\VL53L1CB_SimpleRanging.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Fri Apr 21 11:36:08 2023
<BR><P>
<H3>Maximum Stack Usage =        960 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
VL53L1CB_GetDistance &rArr; vl53l1cb_get_result &rArr; VL53L1_GetMultiRangingData &rArr; VL53L1_get_device_results &rArr; VL53L1_ipp_hist_process_data &rArr; VL53L1_hist_process_data &rArr; VL53L1_f_033 &rArr; VL53L1_f_026 &rArr; VL53L1_f_014 &rArr; __aeabi_uldivmod
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[49]">BSP_GetTick</a> from stm32f4xx_nucleo_bus.o(.text.BSP_GetTick) referenced 2 times from custom_ranging_sensor.o(.text.VL53L1CB_Probe)
 <LI><a href="#[46]">BSP_I2C1_DeInit</a> from stm32f4xx_nucleo_bus.o(.text.BSP_I2C1_DeInit) referenced 2 times from custom_ranging_sensor.o(.text.VL53L1CB_Probe)
 <LI><a href="#[45]">BSP_I2C1_Init</a> from stm32f4xx_nucleo_bus.o(.text.BSP_I2C1_Init) referenced 2 times from custom_ranging_sensor.o(.text.VL53L1CB_Probe)
 <LI><a href="#[48]">BSP_I2C1_Recv</a> from stm32f4xx_nucleo_bus.o(.text.BSP_I2C1_Recv) referenced 2 times from custom_ranging_sensor.o(.text.VL53L1CB_Probe)
 <LI><a href="#[47]">BSP_I2C1_Send</a> from stm32f4xx_nucleo_bus.o(.text.BSP_I2C1_Send) referenced 2 times from custom_ranging_sensor.o(.text.VL53L1CB_Probe)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f4xx_it.o(.text.BusFault_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[30]">DMA1_Stream7_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[34]">DMA2_Stream0_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[35]">DMA2_Stream1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[36]">DMA2_Stream2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[37]">DMA2_Stream3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[38]">DMA2_Stream4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3a]">DMA2_Stream5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3b]">DMA2_Stream6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3c]">DMA2_Stream7_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f4xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2d]">EXTI15_10_IRQHandler</a> from stm32f4xx_it.o(.text.EXTI15_10_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from stm32f4xx_it.o(.text.EXTI4_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1d]">EXTI9_5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[40]">FPU_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f4xx_it.o(.text.HardFault_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[26]">I2C1_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[25]">I2C1_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[28]">I2C2_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[27]">I2C2_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3f]">I2C3_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3e]">I2C3_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f4xx_it.o(.text.MemManage_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f4xx_it.o(.text.NMI_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[39]">OTG_FS_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2f]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f4xx_it.o(.text.PendSV_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2e]">RTC_Alarm_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[31]">SDIO_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[29]">SPI1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2a]">SPI2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[33]">SPI3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[41]">SPI4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f4xx_it.o(.text.SVC_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f4xx_it.o(.text.SysTick_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[43]">SystemInit</a> from system_stm32f4xx.o(.text.SystemInit) referenced from startup_stm32f401xe.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1e]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[21]">TIM1_CC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[20]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1f]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[22]">TIM2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[23]">TIM3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[24]">TIM4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[32]">TIM5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2b]">USART1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2c]">USART2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3d]">USART6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f4xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[51]">VL53L1CB_ConfigIT</a> from vl53l1cb.o(.text.VL53L1CB_ConfigIT) referenced from vl53l1cb.o(.data.VL53L1CB_RANGING_SENSOR_Driver)
 <LI><a href="#[4f]">VL53L1CB_ConfigProfile</a> from vl53l1cb.o(.text.VL53L1CB_ConfigProfile) referenced from vl53l1cb.o(.data.VL53L1CB_RANGING_SENSOR_Driver)
 <LI><a href="#[50]">VL53L1CB_ConfigROI</a> from vl53l1cb.o(.text.VL53L1CB_ConfigROI) referenced from vl53l1cb.o(.data.VL53L1CB_RANGING_SENSOR_Driver)
 <LI><a href="#[4c]">VL53L1CB_DeInit</a> from vl53l1cb.o(.text.VL53L1CB_DeInit) referenced from vl53l1cb.o(.data.VL53L1CB_RANGING_SENSOR_Driver)
 <LI><a href="#[56]">VL53L1CB_GetAddress</a> from vl53l1cb.o(.text.VL53L1CB_GetAddress) referenced from vl53l1cb.o(.data.VL53L1CB_RANGING_SENSOR_Driver)
 <LI><a href="#[4e]">VL53L1CB_GetCapabilities</a> from vl53l1cb.o(.text.VL53L1CB_GetCapabilities) referenced from vl53l1cb.o(.data.VL53L1CB_RANGING_SENSOR_Driver)
 <LI><a href="#[52]">VL53L1CB_GetDistance</a> from vl53l1cb.o(.text.VL53L1CB_GetDistance) referenced from vl53l1cb.o(.data.VL53L1CB_RANGING_SENSOR_Driver)
 <LI><a href="#[58]">VL53L1CB_GetPowerMode</a> from vl53l1cb.o(.text.VL53L1CB_GetPowerMode) referenced from vl53l1cb.o(.data.VL53L1CB_RANGING_SENSOR_Driver)
 <LI><a href="#[4b]">VL53L1CB_Init</a> from vl53l1cb.o(.text.VL53L1CB_Init) referenced from vl53l1cb.o(.data.VL53L1CB_RANGING_SENSOR_Driver)
 <LI><a href="#[4d]">VL53L1CB_ReadID</a> from vl53l1cb.o(.text.VL53L1CB_ReadID) referenced from vl53l1cb.o(.data.VL53L1CB_RANGING_SENSOR_Driver)
 <LI><a href="#[55]">VL53L1CB_SetAddress</a> from vl53l1cb.o(.text.VL53L1CB_SetAddress) referenced from vl53l1cb.o(.data.VL53L1CB_RANGING_SENSOR_Driver)
 <LI><a href="#[57]">VL53L1CB_SetPowerMode</a> from vl53l1cb.o(.text.VL53L1CB_SetPowerMode) referenced from vl53l1cb.o(.data.VL53L1CB_RANGING_SENSOR_Driver)
 <LI><a href="#[53]">VL53L1CB_Start</a> from vl53l1cb.o(.text.VL53L1CB_Start) referenced from vl53l1cb.o(.data.VL53L1CB_RANGING_SENSOR_Driver)
 <LI><a href="#[54]">VL53L1CB_Stop</a> from vl53l1cb.o(.text.VL53L1CB_Stop) referenced from vl53l1cb.o(.data.VL53L1CB_RANGING_SENSOR_Driver)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[44]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f401xe.o(.text)
 <LI><a href="#[4a]">fputc</a> from stm32f4xx_nucleo.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[42]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[44]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(.text)
</UL>
<P><STRONG><a name="[1ee]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[59]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1ef]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1f0]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1f1]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1f2]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1f3]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_dynamic_xtalk_correction_corrector
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_041
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_014
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_001
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_events_per_spad_maths
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_dynamic_xtalk_correction_calc_required_samples
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_copy_and_scale_ambient_info
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_036
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_030
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_events_consistency_check
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_zone_config
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_zone_config
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WriteMulti
</UL>

<P><STRONG><a name="[14a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_process_data
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_039
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_033
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_004
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_023
</UL>

<P><STRONG><a name="[1f4]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[ec]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetMultiRangingData
</UL>

<P><STRONG><a name="[1f5]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ce]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[127]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_histogram_bin_data
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l1_histo_merge
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[61]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[10f]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitValueMaskEx
</UL>

<P><STRONG><a name="[1f6]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1f7]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1f8]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1ea]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1fa]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1fb]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[64]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6c]"></a>BSP_COM_Init</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, stm32f4xx_nucleo.o(.text.BSP_COM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = BSP_COM_Init &rArr; USART2_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_VL53L1CB_SimpleRanging_Init
</UL>

<P><STRONG><a name="[49]"></a>BSP_GetTick</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_nucleo_bus.o(.text.BSP_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_ranging_sensor.o(.text.VL53L1CB_Probe)
</UL>
<P><STRONG><a name="[46]"></a>BSP_I2C1_DeInit</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_nucleo_bus.o(.text.BSP_I2C1_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BSP_I2C1_DeInit &rArr; I2C1_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_MspDeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_ranging_sensor.o(.text.VL53L1CB_Probe)
</UL>
<P><STRONG><a name="[45]"></a>BSP_I2C1_Init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32f4xx_nucleo_bus.o(.text.BSP_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = BSP_I2C1_Init &rArr; I2C1_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_MspInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_ranging_sensor.o(.text.VL53L1CB_Probe)
</UL>
<P><STRONG><a name="[48]"></a>BSP_I2C1_Recv</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, stm32f4xx_nucleo_bus.o(.text.BSP_I2C1_Recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = BSP_I2C1_Recv &rArr; HAL_I2C_Master_Receive &rArr; I2C_MasterRequestRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_ranging_sensor.o(.text.VL53L1CB_Probe)
</UL>
<P><STRONG><a name="[47]"></a>BSP_I2C1_Send</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, stm32f4xx_nucleo_bus.o(.text.BSP_I2C1_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BSP_I2C1_Send &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_ranging_sensor.o(.text.VL53L1CB_Probe)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>CUSTOM_RANGING_SENSOR_ConfigProfile</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_ConfigProfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CUSTOM_RANGING_SENSOR_ConfigProfile
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_VL53L1CB_SimpleRanging_Process
</UL>

<P><STRONG><a name="[b8]"></a>CUSTOM_RANGING_SENSOR_GetCapabilities</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_GetCapabilities))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CUSTOM_RANGING_SENSOR_GetCapabilities
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_VL53L1CB_SimpleRanging_Process
</UL>

<P><STRONG><a name="[bb]"></a>CUSTOM_RANGING_SENSOR_GetDistance</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_GetDistance))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CUSTOM_RANGING_SENSOR_GetDistance
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_VL53L1CB_SimpleRanging_Process
</UL>

<P><STRONG><a name="[78]"></a>CUSTOM_RANGING_SENSOR_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CUSTOM_RANGING_SENSOR_Init &rArr; VL53L1CB_Probe &rArr; VL53L1CB_ReadID &rArr; VL53L1_RdWord &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_device
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1CB_Probe
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_VL53L1CB_SimpleRanging_Init
</UL>

<P><STRONG><a name="[b7]"></a>CUSTOM_RANGING_SENSOR_ReadID</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CUSTOM_RANGING_SENSOR_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_VL53L1CB_SimpleRanging_Process
</UL>

<P><STRONG><a name="[ba]"></a>CUSTOM_RANGING_SENSOR_Start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CUSTOM_RANGING_SENSOR_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_VL53L1CB_SimpleRanging_Process
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EXTI4_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>Error_Handler</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, main.o(.text.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[7e]"></a>HAL_Delay</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, stm32f4xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_VL53L1CB_SimpleRanging_Process
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_device
</UL>

<P><STRONG><a name="[ab]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 464 bytes, Stack size 44 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_MspDeInit
</UL>

<P><STRONG><a name="[7f]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, app_tof_pin_conf.o(.text.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[7d]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[ac]"></a>HAL_GPIO_Init</STRONG> (Thumb, 866 bytes, Stack size 44 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_MspInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_MspInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[b0]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_device
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[6f]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GetTick
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[71]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(.text.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_I2C_DeInit &rArr; HAL_I2C_MspDeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_DeInit
</UL>

<P><STRONG><a name="[76]"></a>HAL_I2C_GetError</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stm32f4xx_hal_i2c.o(.text.HAL_I2C_GetError))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_I2C_GetError
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_Send
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_Recv
</UL>

<P><STRONG><a name="[72]"></a>HAL_I2C_GetState</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, stm32f4xx_hal_i2c.o(.text.HAL_I2C_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_I2C_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_Init
</UL>

<P><STRONG><a name="[81]"></a>HAL_I2C_Init</STRONG> (Thumb, 676 bytes, Stack size 64 bytes, stm32f4xx_hal_i2c.o(.text.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C_Init &rArr; HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[75]"></a>HAL_I2C_Master_Receive</STRONG> (Thumb, 1046 bytes, Stack size 56 bytes, stm32f4xx_hal_i2c.o(.text.HAL_I2C_Master_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_I2C_Master_Receive &rArr; I2C_MasterRequestRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestRead
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_Recv
</UL>

<P><STRONG><a name="[77]"></a>HAL_I2C_Master_Transmit</STRONG> (Thumb, 520 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(.text.HAL_I2C_Master_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_Send
</UL>

<P><STRONG><a name="[80]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_i2c.o(.text.HAL_I2C_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[82]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_i2c.o(.text.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[cc]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[8a]"></a>HAL_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>HAL_InitTick</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[8d]"></a>HAL_MspInit</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriorityGrouping &rArr; __NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[90]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_NVIC_EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[8f]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[8b]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_NVIC_SetPriorityGrouping &rArr; __NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[96]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 592 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[97]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 610 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[99]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[83]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[9a]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[98]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[9b]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1726 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[9c]"></a>HAL_RTC_Init</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, stm32f4xx_hal_rtc.o(.text.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[9d]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(.text.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[a1]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, stm32f4xx_hal_rtc.o(.text.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_ExitInitMode &rArr; HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[a3]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, stm32f4xx_hal_rtc.o(.text.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_ExitInitMode &rArr; HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[a4]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, stm32f4xx_hal_rtc.o(.text.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
</UL>

<P><STRONG><a name="[8e]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[a6]"></a>HAL_UART_Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[a7]"></a>HAL_UART_MspInit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[a9]"></a>HAL_UART_Transmit</STRONG> (Thumb, 334 bytes, Stack size 48 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>MX_I2C1_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_nucleo_bus.o(.text.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_Init
</UL>

<P><STRONG><a name="[b2]"></a>MX_TOF_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_tof.o(.text.MX_TOF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MX_TOF_Init &rArr; MX_VL53L1CB_SimpleRanging_Init &rArr; CUSTOM_RANGING_SENSOR_Init &rArr; VL53L1CB_Probe &rArr; VL53L1CB_ReadID &rArr; VL53L1_RdWord &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_VL53L1CB_SimpleRanging_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>MX_TOF_Process</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_tof.o(.text.MX_TOF_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_TOF_Process &rArr; MX_VL53L1CB_SimpleRanging_Process &rArr; print_result &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_VL53L1CB_SimpleRanging_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_nucleo.o(.text.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, stm32f4xx_hal_rtc.o(.text.RTC_ByteToBcd2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[9e]"></a>RTC_EnterInitMode</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, stm32f4xx_hal_rtc.o(.text.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[9f]"></a>RTC_ExitInitMode</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(.text.RTC_ExitInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC_ExitInitMode &rArr; HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>SystemClock_Config</STRONG> (Thumb, 188 bytes, Stack size 88 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[43]"></a>SystemInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_stm32f4xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1e2]"></a>V53L1_init_zone_dss_configs</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, vl53l1_core.o(.text.V53L1_init_zone_dss_configs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = V53L1_init_zone_dss_configs
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_stop_range
</UL>

<P><STRONG><a name="[1df]"></a>V53L1_init_zone_results_structure</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, vl53l1_core.o(.text.V53L1_init_zone_results_structure))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = V53L1_init_zone_results_structure
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_stop_range
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[51]"></a>VL53L1CB_ConfigIT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, vl53l1cb.o(.text.VL53L1CB_ConfigIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1CB_ConfigIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl53l1cb.o(.data.VL53L1CB_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[4f]"></a>VL53L1CB_ConfigProfile</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, vl53l1cb.o(.text.VL53L1CB_ConfigProfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 796<LI>Call Chain = VL53L1CB_ConfigProfile &rArr; VL53L1_SetDistanceMode &rArr; SetPresetMode &rArr; VL53L1_set_preset_mode &rArr; VL53L1_preset_mode_histogram_long_range_mm2 &rArr; VL53L1_preset_mode_histogram_long_range_mm1 &rArr; VL53L1_preset_mode_histogram_long_range &rArr; VL53L1_preset_mode_histogram_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetDistanceMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl53l1cb.o(.data.VL53L1CB_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[50]"></a>VL53L1CB_ConfigROI</STRONG> (Thumb, 100 bytes, Stack size 88 bytes, vl53l1cb.o(.text.VL53L1CB_ConfigROI))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = VL53L1CB_ConfigROI &rArr; VL53L1_SetROI &rArr; VL53L1_set_zone_config &rArr; VL53L1_init_zone_config_histogram_bins
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetROI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl53l1cb.o(.data.VL53L1CB_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[4c]"></a>VL53L1CB_DeInit</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, vl53l1cb.o(.text.VL53L1CB_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1CB_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl53l1cb.o(.data.VL53L1CB_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[56]"></a>VL53L1CB_GetAddress</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, vl53l1cb.o(.text.VL53L1CB_GetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1CB_GetAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl53l1cb.o(.data.VL53L1CB_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[4e]"></a>VL53L1CB_GetCapabilities</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, vl53l1cb.o(.text.VL53L1CB_GetCapabilities))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1CB_GetCapabilities
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl53l1cb.o(.data.VL53L1CB_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[52]"></a>VL53L1CB_GetDistance</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, vl53l1cb.o(.text.VL53L1CB_GetDistance))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = VL53L1CB_GetDistance &rArr; vl53l1cb_get_result &rArr; VL53L1_GetMultiRangingData &rArr; VL53L1_get_device_results &rArr; VL53L1_ipp_hist_process_data &rArr; VL53L1_hist_process_data &rArr; VL53L1_f_033 &rArr; VL53L1_f_026 &rArr; VL53L1_f_014 &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ClearInterruptAndStartMeasurement
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l1cb_poll_for_measurement
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l1cb_get_result
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl53l1cb.o(.data.VL53L1CB_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[58]"></a>VL53L1CB_GetPowerMode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, vl53l1cb.o(.text.VL53L1CB_GetPowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1CB_GetPowerMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl53l1cb.o(.data.VL53L1CB_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[4b]"></a>VL53L1CB_Init</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, vl53l1cb.o(.text.VL53L1CB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = VL53L1CB_Init &rArr; VL53L1_PerformRefSpadManagement &rArr; VL53L1_run_ref_spad_char &rArr; VL53L1_run_device_test &rArr; VL53L1_wait_for_test_completion &rArr; VL53L1_poll_for_range_completion &rArr; VL53L1_WaitValueMaskEx &rArr; VL53L1_RdByte &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitDeviceBooted
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_StaticInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_PerformRefSpadManagement
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_DataInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl53l1cb.o(.data.VL53L1CB_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[4d]"></a>VL53L1CB_ReadID</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, vl53l1cb.o(.text.VL53L1CB_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = VL53L1CB_ReadID &rArr; VL53L1_RdWord &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_RdWord
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1CB_Probe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl53l1cb.o(.data.VL53L1CB_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[d9]"></a>VL53L1CB_RegisterBusIO</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, vl53l1cb.o(.text.VL53L1CB_RegisterBusIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53L1CB_RegisterBusIO
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1CB_Probe
</UL>

<P><STRONG><a name="[55]"></a>VL53L1CB_SetAddress</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, vl53l1cb.o(.text.VL53L1CB_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = VL53L1CB_SetAddress &rArr; VL53L1_SetDeviceAddress &rArr; VL53L1_WrByte &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetDeviceAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl53l1cb.o(.data.VL53L1CB_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[57]"></a>VL53L1CB_SetPowerMode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, vl53l1cb.o(.text.VL53L1CB_SetPowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1CB_SetPowerMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl53l1cb.o(.data.VL53L1CB_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[53]"></a>VL53L1CB_Start</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, vl53l1cb.o(.text.VL53L1CB_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = VL53L1CB_Start &rArr; VL53L1_StartMeasurement &rArr; VL53L1_init_and_start_range &rArr; VL53L1_update_ll_driver_cfg_state &rArr; VL53L1_update_internal_stream_counters
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_StartMeasurement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl53l1cb.o(.data.VL53L1CB_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[54]"></a>VL53L1CB_Stop</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, vl53l1cb.o(.text.VL53L1CB_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = VL53L1CB_Stop &rArr; VL53L1_StopMeasurement &rArr; VL53L1_stop_range &rArr; VL53L1_set_system_control &rArr; VL53L1_WriteMulti &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_StopMeasurement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl53l1cb.o(.data.VL53L1CB_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[d4]"></a>VL53L1_ClearInterruptAndStartMeasurement</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, vl53l1_api.o(.text.VL53L1_ClearInterruptAndStartMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = VL53L1_ClearInterruptAndStartMeasurement &rArr; VL53L1_clear_interrupt_and_enable_next_range &rArr; VL53L1_init_and_start_range &rArr; VL53L1_update_ll_driver_cfg_state &rArr; VL53L1_update_internal_stream_counters
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_clear_interrupt_and_enable_next_range
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1CB_GetDistance
</UL>

<P><STRONG><a name="[d6]"></a>VL53L1_DataInit</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, vl53l1_api.o(.text.VL53L1_DataInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = VL53L1_DataInit &rArr; VL53L1_data_init &rArr; VL53L1_set_preset_mode &rArr; VL53L1_preset_mode_histogram_long_range_mm2 &rArr; VL53L1_preset_mode_histogram_long_range_mm1 &rArr; VL53L1_preset_mode_histogram_long_range &rArr; VL53L1_preset_mode_histogram_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_dmax_mode
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetLimitCheckEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1CB_Init
</UL>

<P><STRONG><a name="[e2]"></a>VL53L1_GetInterMeasurementPeriodMilliSeconds</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, vl53l1_api.o(.text.VL53L1_GetInterMeasurementPeriodMilliSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_GetInterMeasurementPeriodMilliSeconds &rArr; VL53L1_get_inter_measurement_period_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_inter_measurement_period_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_StartMeasurement
</UL>

<P><STRONG><a name="[ca]"></a>VL53L1_GetLimitCheckEnable</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, vl53l1_api.o(.text.VL53L1_GetLimitCheckEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1_GetLimitCheckEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTargetData
</UL>

<P><STRONG><a name="[c9]"></a>VL53L1_GetLimitCheckValue</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, vl53l1_api.o(.text.VL53L1_GetLimitCheckValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VL53L1_GetLimitCheckValue &rArr; VL53L1_get_lite_sigma_threshold
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_lite_sigma_threshold
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_lite_min_count_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTargetData
</UL>

<P><STRONG><a name="[e6]"></a>VL53L1_GetMeasurementDataReady</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, vl53l1_api.o(.text.VL53L1_GetMeasurementDataReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = VL53L1_GetMeasurementDataReady &rArr; VL53L1_is_new_data_ready &rArr; VL53L1_RdByte &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_is_new_data_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l1cb_poll_for_measurement
</UL>

<P><STRONG><a name="[e8]"></a>VL53L1_GetMeasurementTimingBudgetMicroSeconds</STRONG> (Thumb, 388 bytes, Stack size 64 bytes, vl53l1_api.o(.text.VL53L1_GetMeasurementTimingBudgetMicroSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = VL53L1_GetMeasurementTimingBudgetMicroSeconds &rArr; VL53L1_get_timeouts_us &rArr; VL53L1_calc_decoded_timeout_us &rArr; VL53L1_calc_timeout_us
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_tuning_parm
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_timeouts_us
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetSequenceStepEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_StartMeasurement
</UL>

<P><STRONG><a name="[eb]"></a>VL53L1_GetMultiRangingData</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, vl53l1_api.o(.text.VL53L1_GetMultiRangingData))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = VL53L1_GetMultiRangingData &rArr; VL53L1_get_device_results &rArr; VL53L1_ipp_hist_process_data &rArr; VL53L1_hist_process_data &rArr; VL53L1_f_033 &rArr; VL53L1_f_026 &rArr; VL53L1_f_014 &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMeasurementData
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l1cb_get_result
</UL>

<P><STRONG><a name="[e9]"></a>VL53L1_GetSequenceStepEnable</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, vl53l1_api.o(.text.VL53L1_GetSequenceStepEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VL53L1_GetSequenceStepEnable &rArr; VL53L1_get_sequence_config_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_sequence_config_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetMeasurementTimingBudgetMicroSeconds
</UL>

<P><STRONG><a name="[110]"></a>VL53L1_GetTickCount</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, vl53l1_platform.o(.text.VL53L1_GetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53L1_GetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitValueMaskEx
</UL>

<P><STRONG><a name="[d8]"></a>VL53L1_PerformRefSpadManagement</STRONG> (Thumb, 278 bytes, Stack size 64 bytes, vl53l1_api.o(.text.VL53L1_PerformRefSpadManagement))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = VL53L1_PerformRefSpadManagement &rArr; VL53L1_run_ref_spad_char &rArr; VL53L1_run_device_test &rArr; VL53L1_wait_for_test_completion &rArr; VL53L1_poll_for_range_completion &rArr; VL53L1_WaitValueMaskEx &rArr; VL53L1_RdByte &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_run_ref_spad_char
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_nvm_raw_data
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WriteMulti
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetPresetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1CB_Init
</UL>

<P><STRONG><a name="[f3]"></a>VL53L1_RdByte</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, vl53l1_platform.o(.text.VL53L1_RdByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VL53L1_RdByte &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2CWrite
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2CRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_run_device_test
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_is_new_data_ready
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitValueMaskEx
</UL>

<P><STRONG><a name="[da]"></a>VL53L1_RdWord</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, vl53l1_platform.o(.text.VL53L1_RdWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VL53L1_RdWord &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2CWrite
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2CRead
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_p2p_data
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1CB_ReadID
</UL>

<P><STRONG><a name="[f6]"></a>VL53L1_ReadMulti</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, vl53l1_platform.o(.text.VL53L1_ReadMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VL53L1_ReadMulti &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2CWrite
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2CRead
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_static_nvm_managed
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_nvm_copy_data
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_measurement_results
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_histogram_bin_data
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_customer_nvm_managed
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_run_device_test
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_run_ref_spad_char
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_read
</UL>

<P><STRONG><a name="[db]"></a>VL53L1_SetDeviceAddress</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, vl53l1_api.o(.text.VL53L1_SetDeviceAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = VL53L1_SetDeviceAddress &rArr; VL53L1_WrByte &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1CB_SetAddress
</UL>

<P><STRONG><a name="[cf]"></a>VL53L1_SetDistanceMode</STRONG> (Thumb, 288 bytes, Stack size 144 bytes, vl53l1_api.o(.text.VL53L1_SetDistanceMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 764<LI>Call Chain = VL53L1_SetDistanceMode &rArr; SetPresetMode &rArr; VL53L1_set_preset_mode &rArr; VL53L1_preset_mode_histogram_long_range_mm2 &rArr; VL53L1_preset_mode_histogram_long_range_mm1 &rArr; VL53L1_preset_mode_histogram_long_range &rArr; VL53L1_preset_mode_histogram_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_zone_config
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_timeouts_us
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_zone_config
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_timeouts_us
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPresetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_StaticInit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1CB_ConfigProfile
</UL>

<P><STRONG><a name="[fb]"></a>VL53L1_SetInterMeasurementPeriodMilliSeconds</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, vl53l1_api.o(.text.VL53L1_SetInterMeasurementPeriodMilliSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_SetInterMeasurementPeriodMilliSeconds &rArr; VL53L1_set_inter_measurement_period_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_inter_measurement_period_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetPresetMode
</UL>

<P><STRONG><a name="[e0]"></a>VL53L1_SetLimitCheckEnable</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, vl53l1_api.o(.text.VL53L1_SetLimitCheckEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = VL53L1_SetLimitCheckEnable &rArr; SetLimitValue &rArr; VL53L1_set_lite_sigma_threshold
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLimitValue
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_DataInit
</UL>

<P><STRONG><a name="[d0]"></a>VL53L1_SetMeasurementTimingBudgetMicroSeconds</STRONG> (Thumb, 508 bytes, Stack size 64 bytes, vl53l1_api.o(.text.VL53L1_SetMeasurementTimingBudgetMicroSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = VL53L1_SetMeasurementTimingBudgetMicroSeconds &rArr; VL53L1_set_timeouts_us &rArr; VL53L1_calc_timeout_register_values &rArr; VL53L1_calc_encoded_timeout &rArr; VL53L1_encode_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_timeouts_us
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_tuning_parm
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_timeouts_us
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetSequenceStepEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetPresetMode
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1CB_ConfigProfile
</UL>

<P><STRONG><a name="[f0]"></a>VL53L1_SetPresetMode</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, vl53l1_api.o(.text.VL53L1_SetPresetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = VL53L1_SetPresetMode &rArr; SetPresetMode &rArr; VL53L1_set_preset_mode &rArr; VL53L1_preset_mode_histogram_long_range_mm2 &rArr; VL53L1_preset_mode_histogram_long_range_mm1 &rArr; VL53L1_preset_mode_histogram_long_range &rArr; VL53L1_preset_mode_histogram_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_low_power_auto_data_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetInterMeasurementPeriodMilliSeconds
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPresetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_StaticInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_PerformRefSpadManagement
</UL>

<P><STRONG><a name="[d1]"></a>VL53L1_SetROI</STRONG> (Thumb, 364 bytes, Stack size 144 bytes, vl53l1_api.o(.text.VL53L1_SetROI))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = VL53L1_SetROI &rArr; VL53L1_set_zone_config &rArr; VL53L1_init_zone_config_histogram_bins
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_zone_config
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckValidRectRoi
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1CB_ConfigROI
</UL>

<P><STRONG><a name="[ff]"></a>VL53L1_SmudgeCorrectionEnable</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, vl53l1_api.o(.text.VL53L1_SmudgeCorrectionEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = VL53L1_SmudgeCorrectionEnable &rArr; VL53L1_dynamic_xtalk_correction_single_apply_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_dynamic_xtalk_correction_single_apply_enable
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_dynamic_xtalk_correction_single_apply_disable
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_dynamic_xtalk_correction_enable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_dynamic_xtalk_correction_disable
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_dynamic_xtalk_correction_apply_enable
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_dynamic_xtalk_correction_apply_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_StaticInit
</UL>

<P><STRONG><a name="[dc]"></a>VL53L1_StartMeasurement</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, vl53l1_api.o(.text.VL53L1_StartMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = VL53L1_StartMeasurement &rArr; VL53L1_init_and_start_range &rArr; VL53L1_update_ll_driver_cfg_state &rArr; VL53L1_update_internal_stream_counters
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_load_patch
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetInterMeasurementPeriodMilliSeconds
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1CB_Start
</UL>

<P><STRONG><a name="[d7]"></a>VL53L1_StaticInit</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, vl53l1_api.o(.text.VL53L1_StaticInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 788<LI>Call Chain = VL53L1_StaticInit &rArr; VL53L1_SetDistanceMode &rArr; SetPresetMode &rArr; VL53L1_set_preset_mode &rArr; VL53L1_preset_mode_histogram_long_range_mm2 &rArr; VL53L1_preset_mode_histogram_long_range_mm1 &rArr; VL53L1_preset_mode_histogram_long_range &rArr; VL53L1_preset_mode_histogram_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SmudgeCorrectionEnable
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetPresetMode
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetDistanceMode
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1CB_Init
</UL>

<P><STRONG><a name="[dd]"></a>VL53L1_StopMeasurement</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, vl53l1_api.o(.text.VL53L1_StopMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = VL53L1_StopMeasurement &rArr; VL53L1_stop_range &rArr; VL53L1_set_system_control &rArr; VL53L1_WriteMulti &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_unload_patch
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_stop_range
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1CB_Stop
</UL>

<P><STRONG><a name="[d5]"></a>VL53L1_WaitDeviceBooted</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, vl53l1_api.o(.text.VL53L1_WaitDeviceBooted))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = VL53L1_WaitDeviceBooted &rArr; VL53L1_poll_for_boot_completion &rArr; VL53L1_WaitValueMaskEx &rArr; VL53L1_RdByte &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_poll_for_boot_completion
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1CB_Init
</UL>

<P><STRONG><a name="[10b]"></a>VL53L1_WaitMs</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, vl53l1_platform.o(.text.VL53L1_WaitMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_WaitMs &rArr; VL53L1_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_wait_for_test_completion
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitValueMaskEx
</UL>

<P><STRONG><a name="[10d]"></a>VL53L1_WaitUs</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, vl53l1_platform.o(.text.VL53L1_WaitUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_WaitUs &rArr; VL53L1_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_poll_for_boot_completion
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_read
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_enable
</UL>

<P><STRONG><a name="[10e]"></a>VL53L1_WaitValueMaskEx</STRONG> (Thumb, 272 bytes, Stack size 560 bytes, vl53l1_platform.o(.text.VL53L1_WaitValueMaskEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = VL53L1_WaitValueMaskEx &rArr; VL53L1_RdByte &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_RdByte
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitMs
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetTickCount
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_poll_for_range_completion
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_poll_for_boot_completion
</UL>

<P><STRONG><a name="[f7]"></a>VL53L1_WrByte</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, vl53l1_platform.o(.text.VL53L1_WrByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VL53L1_WrByte &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2CWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_start_test
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_ref_spad_char_config
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_clear_interrupt
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_unload_patch
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_load_patch
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetDeviceAddress
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_read
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_disable
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_powerforce_register
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_firmware_enable_register
</UL>

<P><STRONG><a name="[111]"></a>VL53L1_WrWord</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, vl53l1_platform.o(.text.VL53L1_WrWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VL53L1_WrWord &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2CWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_ref_spad_char_config
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_enable
</UL>

<P><STRONG><a name="[f2]"></a>VL53L1_WriteMulti</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, vl53l1_platform.o(.text.VL53L1_WriteMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = VL53L1_WriteMulti &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2CWrite
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_system_control
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_ref_spad_char_config
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_run_ref_spad_char
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_load_patch
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_PerformRefSpadManagement
</UL>

<P><STRONG><a name="[16d]"></a>VL53L1_calc_crosstalk_plane_offset_with_margin</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, vl53l1_core.o(.text.VL53L1_calc_crosstalk_plane_offset_with_margin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1_calc_crosstalk_plane_offset_with_margin
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
</UL>

<P><STRONG><a name="[113]"></a>VL53L1_calc_decoded_timeout_us</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, vl53l1_core.o(.text.VL53L1_calc_decoded_timeout_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VL53L1_calc_decoded_timeout_us &rArr; VL53L1_calc_timeout_us
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_decode_timeout
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_timeout_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_timeouts_us
</UL>

<P><STRONG><a name="[116]"></a>VL53L1_calc_encoded_timeout</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, vl53l1_core.o(.text.VL53L1_calc_encoded_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_calc_encoded_timeout &rArr; VL53L1_encode_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_encode_timeout
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_timeout_mclks
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_timeout_register_values
</UL>

<P><STRONG><a name="[119]"></a>VL53L1_calc_macro_period_us</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, vl53l1_core.o(.text.VL53L1_calc_macro_period_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53L1_calc_macro_period_us &rArr; VL53L1_calc_pll_period_us
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_pll_period_us
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_decode_vcsel_period
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_timeout_register_values
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_ref_spad_char_config
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_timeouts_us
</UL>

<P><STRONG><a name="[11c]"></a>VL53L1_calc_max_effective_spads</STRONG> (Thumb, 294 bytes, Stack size 48 bytes, vl53l1_core.o(.text.VL53L1_calc_max_effective_spads))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = VL53L1_calc_max_effective_spads &rArr; VL53L1_decode_zone_limits &rArr; VL53L1_decode_zone_size
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_encode_row_col
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_spad_number_to_byte_bit_index
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_is_aperture_location
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_decode_zone_limits
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
</UL>

<P><STRONG><a name="[121]"></a>VL53L1_calc_mm_effective_spads</STRONG> (Thumb, 440 bytes, Stack size 56 bytes, vl53l1_core.o(.text.VL53L1_calc_mm_effective_spads))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = VL53L1_calc_mm_effective_spads &rArr; VL53L1_decode_zone_limits &rArr; VL53L1_decode_zone_size
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_encode_row_col
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_spad_number_to_byte_bit_index
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_is_aperture_location
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_decode_zone_limits
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_p2p_data
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_combine_mm1_mm2_offsets
</UL>

<P><STRONG><a name="[122]"></a>VL53L1_calc_pll_period_mm</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, vl53l1_core_support.o(.text.VL53L1_calc_pll_period_mm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53L1_calc_pll_period_mm &rArr; VL53L1_calc_pll_period_us
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_pll_period_us
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_wrap_dmax
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_014
</UL>

<P><STRONG><a name="[11a]"></a>VL53L1_calc_pll_period_us</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, vl53l1_core_support.o(.text.VL53L1_calc_pll_period_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_calc_pll_period_us
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_histogram_bin_data
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_macro_period_us
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_range_maths
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_011
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_001
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_pll_period_mm
</UL>

<P><STRONG><a name="[1a0]"></a>VL53L1_calc_range_ignore_threshold</STRONG> (Thumb, 212 bytes, Stack size 28 bytes, vl53l1_core.o(.text.VL53L1_calc_range_ignore_threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = VL53L1_calc_range_ignore_threshold
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_xtalk_config_struct
</UL>

<P><STRONG><a name="[117]"></a>VL53L1_calc_timeout_mclks</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, vl53l1_core.o(.text.VL53L1_calc_timeout_mclks))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_calc_timeout_mclks
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_timeout_register_values
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_encoded_timeout
</UL>

<P><STRONG><a name="[123]"></a>VL53L1_calc_timeout_register_values</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, vl53l1_core.o(.text.VL53L1_calc_timeout_register_values))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = VL53L1_calc_timeout_register_values &rArr; VL53L1_calc_encoded_timeout &rArr; VL53L1_encode_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_macro_period_us
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_timeout_mclks
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_encoded_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_timeouts_us
</UL>

<P><STRONG><a name="[115]"></a>VL53L1_calc_timeout_us</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, vl53l1_core.o(.text.VL53L1_calc_timeout_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53L1_calc_timeout_us
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_decoded_timeout_us
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_timeouts_us
</UL>

<P><STRONG><a name="[17c]"></a>VL53L1_check_ll_driver_rd_state</STRONG> (Thumb, 374 bytes, Stack size 40 bytes, vl53l1_core.o(.text.VL53L1_check_ll_driver_rd_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_check_ll_driver_rd_state
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
</UL>

<P><STRONG><a name="[124]"></a>VL53L1_clear_interrupt</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, vl53l1_core.o(.text.VL53L1_clear_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = VL53L1_clear_interrupt &rArr; VL53L1_WrByte &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_run_device_test
</UL>

<P><STRONG><a name="[de]"></a>VL53L1_clear_interrupt_and_enable_next_range</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, vl53l1_api_core.o(.text.VL53L1_clear_interrupt_and_enable_next_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = VL53L1_clear_interrupt_and_enable_next_range &rArr; VL53L1_init_and_start_range &rArr; VL53L1_update_ll_driver_cfg_state &rArr; VL53L1_update_internal_stream_counters
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ClearInterruptAndStartMeasurement
</UL>

<P><STRONG><a name="[13d]"></a>VL53L1_compute_histo_merge_nb</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, vl53l1_core.o(.text.VL53L1_compute_histo_merge_nb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1_compute_histo_merge_nb
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_dynamic_xtalk_correction_corrector
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_dynamic_xtalk_correction_calc_new_xtalk
</UL>

<P><STRONG><a name="[1ca]"></a>VL53L1_config_low_power_auto_mode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, vl53l1_core.o(.text.VL53L1_config_low_power_auto_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1_config_low_power_auto_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_short_ranging
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_ranging
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_long_ranging
</UL>

<P><STRONG><a name="[1a3]"></a>VL53L1_copy_hist_bins_to_static_cfg</STRONG> (Thumb, 158 bytes, Stack size 12 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_copy_hist_bins_to_static_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_copy_hist_bins_to_static_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_multizone_hist_bins_update
</UL>

<P><STRONG><a name="[1b0]"></a>VL53L1_copy_hist_cfg_to_static_cfg</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_copy_hist_cfg_to_static_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1_copy_hist_cfg_to_static_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_special_histogram_short_range
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_xtalk_planar
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_xtalk_mm1
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_short_range_mm1
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_short_range
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging_with_mm1
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging_short_timing
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging_ref
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging_mm1_cal
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_multizone_short_range
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_multizone_long_range
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_multizone
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_medium_range_mm1
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_medium_range
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_long_range_mm1
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_long_range
</UL>

<P><STRONG><a name="[16e]"></a>VL53L1_copy_rtn_good_spads_to_buffer</STRONG> (Thumb, 298 bytes, Stack size 8 bytes, vl53l1_core.o(.text.VL53L1_copy_rtn_good_spads_to_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_copy_rtn_good_spads_to_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_p2p_data
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
</UL>

<P><STRONG><a name="[17a]"></a>VL53L1_copy_sys_and_core_results_to_range_results</STRONG> (Thumb, 718 bytes, Stack size 48 bytes, vl53l1_api_core.o(.text.VL53L1_copy_sys_and_core_results_to_range_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VL53L1_copy_sys_and_core_results_to_range_results
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
</UL>

<P><STRONG><a name="[18e]"></a>VL53L1_copy_xtalk_bin_data_to_histogram_data_struct</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, vl53l1_core_support.o(.text.VL53L1_copy_xtalk_bin_data_to_histogram_data_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_copy_xtalk_bin_data_to_histogram_data_struct
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_process_data
</UL>

<P><STRONG><a name="[df]"></a>VL53L1_data_init</STRONG> (Thumb, 838 bytes, Stack size 72 bytes, vl53l1_api_core.o(.text.VL53L1_data_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = VL53L1_data_init &rArr; VL53L1_set_preset_mode &rArr; VL53L1_preset_mode_histogram_long_range_mm2 &rArr; VL53L1_preset_mode_histogram_long_range_mm1 &rArr; VL53L1_preset_mode_histogram_long_range &rArr; VL53L1_preset_mode_histogram_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_p2p_data
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_zone_cal_config_struct
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_xtalk_extract_config_struct
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_xtalk_config_struct
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_xtalk_bin_data_struct
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_version
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_tuning_parm_storage_struct
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_ssc_config_struct
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_refspadchar_config_struct
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_offset_cal_config_struct
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_ll_driver_state
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_hist_post_process_config_struct
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_hist_gen3_dmax_config_struct
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_dynamic_xtalk_correction_data_init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_histogram_bin_data_struct
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_xtalk_cal_data_init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_low_power_auto_data_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_DataInit
</UL>

<P><STRONG><a name="[136]"></a>VL53L1_decode_row_col</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, vl53l1_core_support.o(.text.VL53L1_decode_row_col))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_decode_row_col
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_mode_mitigation_roi
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_040
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_decode_zone_limits
</UL>

<P><STRONG><a name="[114]"></a>VL53L1_decode_timeout</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, vl53l1_core.o(.text.VL53L1_decode_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_decode_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_histogram_bin_data
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_decoded_timeout_us
</UL>

<P><STRONG><a name="[11b]"></a>VL53L1_decode_vcsel_period</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, vl53l1_core_support.o(.text.VL53L1_decode_vcsel_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = VL53L1_decode_vcsel_period
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_calc_zero_distance_phase
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_macro_period_us
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_038
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_018
</UL>

<P><STRONG><a name="[11d]"></a>VL53L1_decode_zone_limits</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, vl53l1_core.o(.text.VL53L1_decode_zone_limits))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = VL53L1_decode_zone_limits &rArr; VL53L1_decode_zone_size
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_decode_zone_size
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_decode_row_col
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_mm_effective_spads
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_max_effective_spads
</UL>

<P><STRONG><a name="[137]"></a>VL53L1_decode_zone_size</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, vl53l1_core.o(.text.VL53L1_decode_zone_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_decode_zone_size
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_decode_zone_limits
</UL>

<P><STRONG><a name="[138]"></a>VL53L1_disable_firmware</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, vl53l1_core.o(.text.VL53L1_disable_firmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = VL53L1_disable_firmware &rArr; VL53L1_set_firmware_enable_register &rArr; VL53L1_WrByte &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_firmware_enable_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_enable
</UL>

<P><STRONG><a name="[13a]"></a>VL53L1_disable_powerforce</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, vl53l1_core.o(.text.VL53L1_disable_powerforce))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = VL53L1_disable_powerforce &rArr; VL53L1_set_powerforce_register &rArr; VL53L1_WrByte &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_powerforce_register
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_unload_patch
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_disable
</UL>

<P><STRONG><a name="[145]"></a>VL53L1_duration_maths</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, vl53l1_core_support.o(.text.VL53L1_duration_maths))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53L1_duration_maths
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_histogram_bin_data
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_011
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_001
</UL>

<P><STRONG><a name="[101]"></a>VL53L1_dynamic_xtalk_correction_apply_disable</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, vl53l1_api_core.o(.text.VL53L1_dynamic_xtalk_correction_apply_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_dynamic_xtalk_correction_apply_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SmudgeCorrectionEnable
</UL>

<P><STRONG><a name="[104]"></a>VL53L1_dynamic_xtalk_correction_apply_enable</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, vl53l1_api_core.o(.text.VL53L1_dynamic_xtalk_correction_apply_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_dynamic_xtalk_correction_apply_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SmudgeCorrectionEnable
</UL>

<P><STRONG><a name="[13c]"></a>VL53L1_dynamic_xtalk_correction_calc_new_xtalk</STRONG> (Thumb, 958 bytes, Stack size 96 bytes, vl53l1_core.o(.text.VL53L1_dynamic_xtalk_correction_calc_new_xtalk))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = VL53L1_dynamic_xtalk_correction_calc_new_xtalk &rArr; VL53L1_compute_histo_merge_nb
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_compute_histo_merge_nb
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_dynamic_xtalk_correction_corrector
</UL>

<P><STRONG><a name="[13e]"></a>VL53L1_dynamic_xtalk_correction_calc_required_samples</STRONG> (Thumb, 290 bytes, Stack size 80 bytes, vl53l1_core.o(.text.VL53L1_dynamic_xtalk_correction_calc_required_samples))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = VL53L1_dynamic_xtalk_correction_calc_required_samples &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_dynamic_xtalk_correction_corrector
</UL>

<P><STRONG><a name="[13f]"></a>VL53L1_dynamic_xtalk_correction_corrector</STRONG> (Thumb, 1364 bytes, Stack size 128 bytes, vl53l1_core.o(.text.VL53L1_dynamic_xtalk_correction_corrector))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = VL53L1_dynamic_xtalk_correction_corrector &rArr; VL53L1_dynamic_xtalk_correction_calc_required_samples &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_compute_histo_merge_nb
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_dynamic_xtalk_correction_output_init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_dynamic_xtalk_correction_calc_required_samples
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_dynamic_xtalk_correction_calc_new_xtalk
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
</UL>

<P><STRONG><a name="[135]"></a>VL53L1_dynamic_xtalk_correction_data_init</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, vl53l1_core.o(.text.VL53L1_dynamic_xtalk_correction_data_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = VL53L1_dynamic_xtalk_correction_data_init &rArr; VL53L1_dynamic_xtalk_correction_output_init
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_dynamic_xtalk_correction_output_init
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[100]"></a>VL53L1_dynamic_xtalk_correction_disable</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, vl53l1_api_core.o(.text.VL53L1_dynamic_xtalk_correction_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_dynamic_xtalk_correction_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SmudgeCorrectionEnable
</UL>

<P><STRONG><a name="[103]"></a>VL53L1_dynamic_xtalk_correction_enable</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, vl53l1_api_core.o(.text.VL53L1_dynamic_xtalk_correction_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_dynamic_xtalk_correction_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SmudgeCorrectionEnable
</UL>

<P><STRONG><a name="[140]"></a>VL53L1_dynamic_xtalk_correction_output_init</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, vl53l1_core.o(.text.VL53L1_dynamic_xtalk_correction_output_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_dynamic_xtalk_correction_output_init
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_dynamic_xtalk_correction_data_init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_dynamic_xtalk_correction_corrector
</UL>

<P><STRONG><a name="[102]"></a>VL53L1_dynamic_xtalk_correction_single_apply_disable</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, vl53l1_api_core.o(.text.VL53L1_dynamic_xtalk_correction_single_apply_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_dynamic_xtalk_correction_single_apply_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SmudgeCorrectionEnable
</UL>

<P><STRONG><a name="[105]"></a>VL53L1_dynamic_xtalk_correction_single_apply_enable</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, vl53l1_api_core.o(.text.VL53L1_dynamic_xtalk_correction_single_apply_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_dynamic_xtalk_correction_single_apply_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SmudgeCorrectionEnable
</UL>

<P><STRONG><a name="[177]"></a>VL53L1_dynamic_zone_update</STRONG> (Thumb, 254 bytes, Stack size 36 bytes, vl53l1_core.o(.text.VL53L1_dynamic_zone_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = VL53L1_dynamic_zone_update
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
</UL>

<P><STRONG><a name="[141]"></a>VL53L1_enable_firmware</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, vl53l1_core.o(.text.VL53L1_enable_firmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = VL53L1_enable_firmware &rArr; VL53L1_set_firmware_enable_register &rArr; VL53L1_WrByte &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_firmware_enable_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_disable
</UL>

<P><STRONG><a name="[142]"></a>VL53L1_enable_powerforce</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, vl53l1_core.o(.text.VL53L1_enable_powerforce))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = VL53L1_enable_powerforce &rArr; VL53L1_set_powerforce_register &rArr; VL53L1_WrByte &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_powerforce_register
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_run_ref_spad_char
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_load_patch
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_enable
</UL>

<P><STRONG><a name="[11e]"></a>VL53L1_encode_row_col</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, vl53l1_core.o(.text.VL53L1_encode_row_col))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_encode_row_col
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_user_zone
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_mm_effective_spads
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_max_effective_spads
</UL>

<P><STRONG><a name="[118]"></a>VL53L1_encode_timeout</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, vl53l1_core.o(.text.VL53L1_encode_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1_encode_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_encoded_timeout
</UL>

<P><STRONG><a name="[1e1]"></a>VL53L1_encode_zone_size</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, vl53l1_core.o(.text.VL53L1_encode_zone_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_encode_zone_size
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_user_zone
</UL>

<P><STRONG><a name="[143]"></a>VL53L1_events_per_spad_maths</STRONG> (Thumb, 150 bytes, Stack size 64 bytes, vl53l1_core_support.o(.text.VL53L1_events_per_spad_maths))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = VL53L1_events_per_spad_maths &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_011
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_001
</UL>

<P><STRONG><a name="[144]"></a>VL53L1_f_001</STRONG> (Thumb, 1026 bytes, Stack size 64 bytes, vl53l1_dmax.o(.text.VL53L1_f_001))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = VL53L1_f_001 &rArr; VL53L1_events_per_spad_maths &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_duration_maths
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_pll_period_us
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_002
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_rate_maths
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_events_per_spad_maths
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_isqrt
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_033
</UL>

<P><STRONG><a name="[148]"></a>VL53L1_f_002</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, vl53l1_dmax.o(.text.VL53L1_f_002))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = VL53L1_f_002 &rArr; VL53L1_isqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_isqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_001
</UL>

<P><STRONG><a name="[149]"></a>VL53L1_f_004</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, vl53l1_hist_core.o(.text.VL53L1_f_004))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = VL53L1_f_004 &rArr; VL53L1_f_038 &rArr; VL53L1_decode_vcsel_period
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_038
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_033
</UL>

<P><STRONG><a name="[14c]"></a>VL53L1_f_011</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, vl53l1_hist_core.o(.text.VL53L1_f_011))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = VL53L1_f_011 &rArr; VL53L1_events_per_spad_maths &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_duration_maths
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_pll_period_us
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_rate_per_spad_maths
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_rate_maths
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_events_per_spad_maths
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_033
</UL>

<P><STRONG><a name="[14e]"></a>VL53L1_f_012</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, vl53l1_hist_core.o(.text.VL53L1_f_012))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = VL53L1_f_012 &rArr; VL53L1_range_maths &rArr; VL53L1_calc_pll_period_us
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_range_maths
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_033
</UL>

<P><STRONG><a name="[155]"></a>VL53L1_f_013</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, vl53l1_hist_core.o(.text.VL53L1_f_013))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1_f_013
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_034
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_026
</UL>

<P><STRONG><a name="[150]"></a>VL53L1_f_014</STRONG> (Thumb, 900 bytes, Stack size 80 bytes, vl53l1_sigma_estimate.o(.text.VL53L1_f_014))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = VL53L1_f_014 &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_isqrt
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_pll_period_mm
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_026
</UL>

<P><STRONG><a name="[151]"></a>VL53L1_f_016</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, vl53l1_hist_algos_gen3.o(.text.VL53L1_f_016))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = VL53L1_f_016 &rArr; VL53L1_init_histogram_bin_data_struct
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_histogram_bin_data_struct
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_033
</UL>

<P><STRONG><a name="[152]"></a>VL53L1_f_018</STRONG> (Thumb, 548 bytes, Stack size 48 bytes, vl53l1_hist_algos_gen3.o(.text.VL53L1_f_018))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = VL53L1_f_018 &rArr; VL53L1_isqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_decode_vcsel_period
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_isqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_033
</UL>

<P><STRONG><a name="[15d]"></a>VL53L1_f_019</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, vl53l1_hist_algos_gen3.o(.text.VL53L1_f_019))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_f_019
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_033
</UL>

<P><STRONG><a name="[15e]"></a>VL53L1_f_020</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, vl53l1_hist_algos_gen3.o(.text.VL53L1_f_020))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_f_020
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_033
</UL>

<P><STRONG><a name="[15f]"></a>VL53L1_f_021</STRONG> (Thumb, 468 bytes, Stack size 16 bytes, vl53l1_hist_algos_gen3.o(.text.VL53L1_f_021))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1_f_021
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_033
</UL>

<P><STRONG><a name="[160]"></a>VL53L1_f_022</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, vl53l1_hist_algos_gen3.o(.text.VL53L1_f_022))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = VL53L1_f_022
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_033
</UL>

<P><STRONG><a name="[153]"></a>VL53L1_f_023</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, vl53l1_hist_algos_gen3.o(.text.VL53L1_f_023))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53L1_f_023
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_033
</UL>

<P><STRONG><a name="[154]"></a>VL53L1_f_026</STRONG> (Thumb, 344 bytes, Stack size 120 bytes, vl53l1_hist_algos_gen3.o(.text.VL53L1_f_026))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = VL53L1_f_026 &rArr; VL53L1_f_014 &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_014
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_013
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_033
</UL>

<P><STRONG><a name="[156]"></a>VL53L1_f_027</STRONG> (Thumb, 392 bytes, Stack size 48 bytes, vl53l1_hist_algos_gen3.o(.text.VL53L1_f_027))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = VL53L1_f_027 &rArr; VL53L1_f_030 &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_030
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_033
</UL>

<P><STRONG><a name="[163]"></a>VL53L1_f_028</STRONG> (Thumb, 526 bytes, Stack size 128 bytes, vl53l1_hist_algos_gen3.o(.text.VL53L1_f_028))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = VL53L1_f_028
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_033
</UL>

<P><STRONG><a name="[164]"></a>VL53L1_f_029</STRONG> (Thumb, 358 bytes, Stack size 12 bytes, vl53l1_hist_algos_gen3.o(.text.VL53L1_f_029))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_f_029
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_033
</UL>

<P><STRONG><a name="[157]"></a>VL53L1_f_030</STRONG> (Thumb, 400 bytes, Stack size 56 bytes, vl53l1_hist_algos_gen3.o(.text.VL53L1_f_030))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = VL53L1_f_030 &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_027
</UL>

<P><STRONG><a name="[158]"></a>VL53L1_f_033</STRONG> (Thumb, 1142 bytes, Stack size 80 bytes, vl53l1_hist_algos_gen4.o(.text.VL53L1_f_033))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = VL53L1_f_033 &rArr; VL53L1_f_026 &rArr; VL53L1_f_014 &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_estimate_ambient_from_ambient_bins
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_calc_zero_distance_phase
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_035
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_034
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_012
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_011
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_004
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_029
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_028
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_027
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_026
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_023
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_022
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_021
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_020
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_019
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_018
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_016
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_001
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_remove_ambient_bins
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_estimate_ambient_from_thresholded_bins
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_process_data
</UL>

<P><STRONG><a name="[161]"></a>VL53L1_f_034</STRONG> (Thumb, 278 bytes, Stack size 56 bytes, vl53l1_hist_algos_gen4.o(.text.VL53L1_f_034))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = VL53L1_f_034 &rArr; VL53L1_f_013
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_013
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_033
</UL>

<P><STRONG><a name="[162]"></a>VL53L1_f_035</STRONG> (Thumb, 544 bytes, Stack size 64 bytes, vl53l1_hist_algos_gen4.o(.text.VL53L1_f_035))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = VL53L1_f_035 &rArr; VL53L1_f_036 &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_036
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_033
</UL>

<P><STRONG><a name="[165]"></a>VL53L1_f_036</STRONG> (Thumb, 360 bytes, Stack size 64 bytes, vl53l1_hist_algos_gen4.o(.text.VL53L1_f_036))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = VL53L1_f_036 &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_035
</UL>

<P><STRONG><a name="[14b]"></a>VL53L1_f_038</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, vl53l1_hist_core.o(.text.VL53L1_f_038))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = VL53L1_f_038 &rArr; VL53L1_decode_vcsel_period
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_decode_vcsel_period
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_004
</UL>

<P><STRONG><a name="[166]"></a>VL53L1_f_039</STRONG> (Thumb, 704 bytes, Stack size 64 bytes, vl53l1_hist_core.o(.text.VL53L1_f_039))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = VL53L1_f_039
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_process_data
</UL>

<P><STRONG><a name="[167]"></a>VL53L1_f_040</STRONG> (Thumb, 618 bytes, Stack size 80 bytes, vl53l1_xtalk.o(.text.VL53L1_f_040))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = VL53L1_f_040 &rArr; VL53L1_decode_row_col
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_decode_row_col
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_process_data
</UL>

<P><STRONG><a name="[168]"></a>VL53L1_f_041</STRONG> (Thumb, 256 bytes, Stack size 64 bytes, vl53l1_xtalk.o(.text.VL53L1_f_041))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = VL53L1_f_041 &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_process_data
</UL>

<P><STRONG><a name="[169]"></a>VL53L1_get_customer_nvm_managed</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, vl53l1_register_funcs.o(.text.VL53L1_get_customer_nvm_managed))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = VL53L1_get_customer_nvm_managed &rArr; VL53L1_ReadMulti &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ReadMulti
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_customer_nvm_managed
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_p2p_data
</UL>

<P><STRONG><a name="[ed]"></a>VL53L1_get_device_results</STRONG> (Thumb, 1974 bytes, Stack size 160 bytes, vl53l1_api_core.o(.text.VL53L1_get_device_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = VL53L1_get_device_results &rArr; VL53L1_ipp_hist_process_data &rArr; VL53L1_hist_process_data &rArr; VL53L1_f_033 &rArr; VL53L1_f_026 &rArr; VL53L1_f_014 &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_multizone_hist_bins_update
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_low_power_auto_setup_manual_calibration
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ipp_hist_process_data
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_xmonitor_consistency_check
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_wrap_dmax
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_phase_consistency_check
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_copy_results_to_sys_and_core
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_copy_and_scale_ambient_info
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_combine_mm1_mm2_offsets
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_measurement_results
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_histogram_bin_data
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_dmax_calibration_data
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_dynamic_zone_update
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_dynamic_xtalk_correction_corrector
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_copy_sys_and_core_results_to_range_results
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_copy_rtn_good_spads_to_buffer
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_check_ll_driver_rd_state
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_max_effective_spads
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_crosstalk_plane_offset_with_margin
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_offset_per_vcsel
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_compute_histo_merge_nb
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetMultiRangingData
</UL>

<P><STRONG><a name="[171]"></a>VL53L1_get_dmax_calibration_data</STRONG> (Thumb, 204 bytes, Stack size 28 bytes, vl53l1_api_core.o(.text.VL53L1_get_dmax_calibration_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = VL53L1_get_dmax_calibration_data
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
</UL>

<P><STRONG><a name="[16b]"></a>VL53L1_get_histogram_bin_data</STRONG> (Thumb, 894 bytes, Stack size 360 bytes, vl53l1_api_core.o(.text.VL53L1_get_histogram_bin_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = VL53L1_get_histogram_bin_data &rArr; vl53l1_histo_merge &rArr; vl53l1_diff_histo_stddev
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_uint32_t
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_uint16_t
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_get_bin_sequence_config
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_estimate_ambient_from_ambient_bins
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_calc_zero_distance_phase
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_duration_maths
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_decode_timeout
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_pll_period_us
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l1_histo_merge
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ReadMulti
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_tuning_parm
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
</UL>

<P><STRONG><a name="[e3]"></a>VL53L1_get_inter_measurement_period_ms</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, vl53l1_api_core.o(.text.VL53L1_get_inter_measurement_period_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1_get_inter_measurement_period_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetInterMeasurementPeriodMilliSeconds
</UL>

<P><STRONG><a name="[e5]"></a>VL53L1_get_lite_min_count_rate</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, vl53l1_api_core.o(.text.VL53L1_get_lite_min_count_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1_get_lite_min_count_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetLimitCheckValue
</UL>

<P><STRONG><a name="[e4]"></a>VL53L1_get_lite_sigma_threshold</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, vl53l1_api_core.o(.text.VL53L1_get_lite_sigma_threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1_get_lite_sigma_threshold
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetLimitCheckValue
</UL>

<P><STRONG><a name="[179]"></a>VL53L1_get_measurement_results</STRONG> (Thumb, 298 bytes, Stack size 304 bytes, vl53l1_api_core.o(.text.VL53L1_get_measurement_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = VL53L1_get_measurement_results &rArr; VL53L1_ReadMulti &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_system_results
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_debug_results
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_core_results
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ReadMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
</UL>

<P><STRONG><a name="[184]"></a>VL53L1_get_mode_mitigation_roi</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, vl53l1_api_core.o(.text.VL53L1_get_mode_mitigation_roi))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = VL53L1_get_mode_mitigation_roi &rArr; VL53L1_decode_row_col
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_decode_row_col
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_p2p_data
</UL>

<P><STRONG><a name="[185]"></a>VL53L1_get_nvm_copy_data</STRONG> (Thumb, 78 bytes, Stack size 72 bytes, vl53l1_register_funcs.o(.text.VL53L1_get_nvm_copy_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = VL53L1_get_nvm_copy_data &rArr; VL53L1_ReadMulti &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ReadMulti
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_nvm_copy_data
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_p2p_data
</UL>

<P><STRONG><a name="[c4]"></a>VL53L1_get_preset_mode_timing_cfg</STRONG> (Thumb, 610 bytes, Stack size 28 bytes, vl53l1_api_core.o(.text.VL53L1_get_preset_mode_timing_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = VL53L1_get_preset_mode_timing_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPresetMode
</UL>

<P><STRONG><a name="[ee]"></a>VL53L1_get_sequence_config_bit</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, vl53l1_api_core.o(.text.VL53L1_get_sequence_config_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53L1_get_sequence_config_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetSequenceStepEnable
</UL>

<P><STRONG><a name="[187]"></a>VL53L1_get_static_nvm_managed</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, vl53l1_register_funcs.o(.text.VL53L1_get_static_nvm_managed))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = VL53L1_get_static_nvm_managed &rArr; VL53L1_ReadMulti &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ReadMulti
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_static_nvm_managed
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_p2p_data
</UL>

<P><STRONG><a name="[ea]"></a>VL53L1_get_timeouts_us</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, vl53l1_api_core.o(.text.VL53L1_get_timeouts_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = VL53L1_get_timeouts_us &rArr; VL53L1_calc_decoded_timeout_us &rArr; VL53L1_calc_timeout_us
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_timeout_us
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_macro_period_us
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_decoded_timeout_us
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetDistanceMode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetMeasurementTimingBudgetMicroSeconds
</UL>

<P><STRONG><a name="[cb]"></a>VL53L1_get_tuning_parm</STRONG> (Thumb, 2800 bytes, Stack size 32 bytes, vl53l1_api_core.o(.text.VL53L1_get_tuning_parm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53L1_get_tuning_parm
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_histogram_bin_data
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l1_histo_merge
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_load_patch
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTargetData
</UL>

<P><STRONG><a name="[f8]"></a>VL53L1_get_zone_config</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, vl53l1_api_core.o(.text.VL53L1_get_zone_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53L1_get_zone_config
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetDistanceMode
</UL>

<P><STRONG><a name="[159]"></a>VL53L1_hist_calc_zero_distance_phase</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, vl53l1_core_support.o(.text.VL53L1_hist_calc_zero_distance_phase))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = VL53L1_hist_calc_zero_distance_phase &rArr; VL53L1_decode_vcsel_period
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_decode_vcsel_period
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_histogram_bin_data
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_033
</UL>

<P><STRONG><a name="[16f]"></a>VL53L1_hist_combine_mm1_mm2_offsets</STRONG> (Thumb, 314 bytes, Stack size 72 bytes, vl53l1_core.o(.text.VL53L1_hist_combine_mm1_mm2_offsets))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = VL53L1_hist_combine_mm1_mm2_offsets &rArr; VL53L1_calc_mm_effective_spads &rArr; VL53L1_decode_zone_limits &rArr; VL53L1_decode_zone_size
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_mm_effective_spads
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
</UL>

<P><STRONG><a name="[16c]"></a>VL53L1_hist_copy_and_scale_ambient_info</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, vl53l1_core.o(.text.VL53L1_hist_copy_and_scale_ambient_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = VL53L1_hist_copy_and_scale_ambient_info &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
</UL>

<P><STRONG><a name="[176]"></a>VL53L1_hist_copy_results_to_sys_and_core</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, vl53l1_core.o(.text.VL53L1_hist_copy_results_to_sys_and_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = VL53L1_hist_copy_results_to_sys_and_core &rArr; VL53L1_init_system_results
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_system_results
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
</UL>

<P><STRONG><a name="[15b]"></a>VL53L1_hist_estimate_ambient_from_ambient_bins</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, vl53l1_core_support.o(.text.VL53L1_hist_estimate_ambient_from_ambient_bins))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_hist_estimate_ambient_from_ambient_bins
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_histogram_bin_data
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_033
</UL>

<P><STRONG><a name="[15a]"></a>VL53L1_hist_estimate_ambient_from_thresholded_bins</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, vl53l1_core_support.o(.text.VL53L1_hist_estimate_ambient_from_thresholded_bins))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = VL53L1_hist_estimate_ambient_from_thresholded_bins &rArr; VL53L1_isqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_find_min_max_bin_values
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_isqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_033
</UL>

<P><STRONG><a name="[18b]"></a>VL53L1_hist_events_consistency_check</STRONG> (Thumb, 812 bytes, Stack size 104 bytes, vl53l1_core.o(.text.VL53L1_hist_events_consistency_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = VL53L1_hist_events_consistency_check &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_isqrt
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_xmonitor_consistency_check
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_phase_consistency_check
</UL>

<P><STRONG><a name="[18a]"></a>VL53L1_hist_find_min_max_bin_values</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, vl53l1_core_support.o(.text.VL53L1_hist_find_min_max_bin_values))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_hist_find_min_max_bin_values
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_estimate_ambient_from_thresholded_bins
</UL>

<P><STRONG><a name="[180]"></a>VL53L1_hist_get_bin_sequence_config</STRONG> (Thumb, 644 bytes, Stack size 24 bytes, vl53l1_core.o(.text.VL53L1_hist_get_bin_sequence_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53L1_hist_get_bin_sequence_config
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_histogram_bin_data
</UL>

<P><STRONG><a name="[18c]"></a>VL53L1_hist_merged_pulse_check</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, vl53l1_core.o(.text.VL53L1_hist_merged_pulse_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1_hist_merged_pulse_check
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_phase_consistency_check
</UL>

<P><STRONG><a name="[174]"></a>VL53L1_hist_phase_consistency_check</STRONG> (Thumb, 632 bytes, Stack size 80 bytes, vl53l1_core.o(.text.VL53L1_hist_phase_consistency_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = VL53L1_hist_phase_consistency_check &rArr; VL53L1_hist_events_consistency_check &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_merged_pulse_check
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_events_consistency_check
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
</UL>

<P><STRONG><a name="[18d]"></a>VL53L1_hist_process_data</STRONG> (Thumb, 730 bytes, Stack size 328 bytes, vl53l1_hist_funcs.o(.text.VL53L1_hist_process_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = VL53L1_hist_process_data &rArr; VL53L1_f_033 &rArr; VL53L1_f_026 &rArr; VL53L1_f_014 &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_histogram_bin_data_struct
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_041
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_040
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_039
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_033
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_copy_xtalk_bin_data_to_histogram_data_struct
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ipp_hist_process_data
</UL>

<P><STRONG><a name="[15c]"></a>VL53L1_hist_remove_ambient_bins</STRONG> (Thumb, 288 bytes, Stack size 8 bytes, vl53l1_core_support.o(.text.VL53L1_hist_remove_ambient_bins))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_hist_remove_ambient_bins
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_033
</UL>

<P><STRONG><a name="[173]"></a>VL53L1_hist_wrap_dmax</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, vl53l1_core.o(.text.VL53L1_hist_wrap_dmax))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = VL53L1_hist_wrap_dmax &rArr; VL53L1_calc_pll_period_mm &rArr; VL53L1_calc_pll_period_us
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_pll_period_mm
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
</UL>

<P><STRONG><a name="[175]"></a>VL53L1_hist_xmonitor_consistency_check</STRONG> (Thumb, 192 bytes, Stack size 64 bytes, vl53l1_core.o(.text.VL53L1_hist_xmonitor_consistency_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = VL53L1_hist_xmonitor_consistency_check &rArr; VL53L1_hist_events_consistency_check &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_events_consistency_check
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
</UL>

<P><STRONG><a name="[182]"></a>VL53L1_i2c_decode_core_results</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, vl53l1_register_funcs.o(.text.VL53L1_i2c_decode_core_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = VL53L1_i2c_decode_core_results &rArr; VL53L1_i2c_decode_uint32_t
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_uint32_t
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_int32_t
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_measurement_results
</UL>

<P><STRONG><a name="[16a]"></a>VL53L1_i2c_decode_customer_nvm_managed</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, vl53l1_register_funcs.o(.text.VL53L1_i2c_decode_customer_nvm_managed))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = VL53L1_i2c_decode_customer_nvm_managed &rArr; VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_uint16_t
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_int16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_customer_nvm_managed
</UL>

<P><STRONG><a name="[181]"></a>VL53L1_i2c_decode_debug_results</STRONG> (Thumb, 642 bytes, Stack size 32 bytes, vl53l1_register_funcs.o(.text.VL53L1_i2c_decode_debug_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = VL53L1_i2c_decode_debug_results &rArr; VL53L1_i2c_decode_uint32_t
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_uint32_t
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_measurement_results
</UL>

<P><STRONG><a name="[190]"></a>VL53L1_i2c_decode_int16_t</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, vl53l1_core.o(.text.VL53L1_i2c_decode_int16_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_i2c_decode_int16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_customer_nvm_managed
</UL>

<P><STRONG><a name="[18f]"></a>VL53L1_i2c_decode_int32_t</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, vl53l1_core.o(.text.VL53L1_i2c_decode_int32_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_i2c_decode_int32_t
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_core_results
</UL>

<P><STRONG><a name="[186]"></a>VL53L1_i2c_decode_nvm_copy_data</STRONG> (Thumb, 554 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(.text.VL53L1_i2c_decode_nvm_copy_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = VL53L1_i2c_decode_nvm_copy_data &rArr; VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_nvm_copy_data
</UL>

<P><STRONG><a name="[188]"></a>VL53L1_i2c_decode_static_nvm_managed</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(.text.VL53L1_i2c_decode_static_nvm_managed))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = VL53L1_i2c_decode_static_nvm_managed &rArr; VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_static_nvm_managed
</UL>

<P><STRONG><a name="[183]"></a>VL53L1_i2c_decode_system_results</STRONG> (Thumb, 422 bytes, Stack size 32 bytes, vl53l1_register_funcs.o(.text.VL53L1_i2c_decode_system_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = VL53L1_i2c_decode_system_results &rArr; VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_measurement_results
</UL>

<P><STRONG><a name="[17d]"></a>VL53L1_i2c_decode_uint16_t</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, vl53l1_core.o(.text.VL53L1_i2c_decode_uint16_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_system_results
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_debug_results
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_histogram_bin_data
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_static_nvm_managed
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_nvm_copy_data
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_customer_nvm_managed
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_decode_fmt_range_results_data
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_decode_cal_peak_rate_map
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_decode_additional_offset_cal_data
</UL>

<P><STRONG><a name="[17e]"></a>VL53L1_i2c_decode_uint32_t</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, vl53l1_core.o(.text.VL53L1_i2c_decode_uint32_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_i2c_decode_uint32_t
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_debug_results
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_core_results
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_histogram_bin_data
</UL>

<P><STRONG><a name="[191]"></a>VL53L1_i2c_encode_customer_nvm_managed</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, vl53l1_register_funcs.o(.text.VL53L1_i2c_encode_customer_nvm_managed))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = VL53L1_i2c_encode_customer_nvm_managed &rArr; VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_uint16_t
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_int16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[194]"></a>VL53L1_i2c_encode_dynamic_config</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, vl53l1_register_funcs.o(.text.VL53L1_i2c_encode_dynamic_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = VL53L1_i2c_encode_dynamic_config &rArr; VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[195]"></a>VL53L1_i2c_encode_general_config</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, vl53l1_register_funcs.o(.text.VL53L1_i2c_encode_general_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = VL53L1_i2c_encode_general_config &rArr; VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[193]"></a>VL53L1_i2c_encode_int16_t</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, vl53l1_core.o(.text.VL53L1_i2c_encode_int16_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_i2c_encode_int16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_customer_nvm_managed
</UL>

<P><STRONG><a name="[196]"></a>VL53L1_i2c_encode_static_config</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, vl53l1_register_funcs.o(.text.VL53L1_i2c_encode_static_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = VL53L1_i2c_encode_static_config &rArr; VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[197]"></a>VL53L1_i2c_encode_static_nvm_managed</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, vl53l1_register_funcs.o(.text.VL53L1_i2c_encode_static_nvm_managed))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = VL53L1_i2c_encode_static_nvm_managed &rArr; VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[19d]"></a>VL53L1_i2c_encode_system_control</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, vl53l1_register_funcs.o(.text.VL53L1_i2c_encode_system_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = VL53L1_i2c_encode_system_control
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_system_control
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[198]"></a>VL53L1_i2c_encode_timing_config</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, vl53l1_register_funcs.o(.text.VL53L1_i2c_encode_timing_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = VL53L1_i2c_encode_timing_config &rArr; VL53L1_i2c_encode_uint32_t
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_uint32_t
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[192]"></a>VL53L1_i2c_encode_uint16_t</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, vl53l1_core.o(.text.VL53L1_i2c_encode_uint16_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_timing_config
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_static_nvm_managed
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_static_config
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_general_config
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_dynamic_config
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_customer_nvm_managed
</UL>

<P><STRONG><a name="[199]"></a>VL53L1_i2c_encode_uint32_t</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, vl53l1_core.o(.text.VL53L1_i2c_encode_uint32_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = VL53L1_i2c_encode_uint32_t
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_timing_config
</UL>

<P><STRONG><a name="[107]"></a>VL53L1_init_and_start_range</STRONG> (Thumb, 1064 bytes, Stack size 336 bytes, vl53l1_api_core.o(.text.VL53L1_init_and_start_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = VL53L1_init_and_start_range &rArr; VL53L1_update_ll_driver_cfg_state &rArr; VL53L1_update_internal_stream_counters
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_update_ll_driver_rd_state
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_update_ll_driver_cfg_state
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_zone_dss_config
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_user_zone
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_save_cfg_data
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_timing_config
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_system_control
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_static_nvm_managed
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_static_config
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_general_config
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_dynamic_config
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_customer_nvm_managed
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WriteMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_clear_interrupt_and_enable_next_range
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_StartMeasurement
</UL>

<P><STRONG><a name="[130]"></a>VL53L1_init_hist_gen3_dmax_config_struct</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_init_hist_gen3_dmax_config_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_init_hist_gen3_dmax_config_struct
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[12f]"></a>VL53L1_init_hist_post_process_config_struct</STRONG> (Thumb, 240 bytes, Stack size 20 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_init_hist_post_process_config_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = VL53L1_init_hist_post_process_config_struct
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[132]"></a>VL53L1_init_histogram_bin_data_struct</STRONG> (Thumb, 332 bytes, Stack size 20 bytes, vl53l1_core_support.o(.text.VL53L1_init_histogram_bin_data_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = VL53L1_init_histogram_bin_data_struct
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_process_data
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_016
</UL>

<P><STRONG><a name="[1ae]"></a>VL53L1_init_histogram_config_structure</STRONG> (Thumb, 300 bytes, Stack size 44 bytes, vl53l1_core.o(.text.VL53L1_init_histogram_config_structure))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = VL53L1_init_histogram_config_structure
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_special_histogram_short_range
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_xtalk_planar
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_xtalk_mm1
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_short_range_mm1
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_short_range
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging_with_mm1
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging_short_timing
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging_mm1_cal
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_medium_range_mm1
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_medium_range
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_long_range_mm1
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_long_range
</UL>

<P><STRONG><a name="[1af]"></a>VL53L1_init_histogram_multizone_config_structure</STRONG> (Thumb, 300 bytes, Stack size 44 bytes, vl53l1_core.o(.text.VL53L1_init_histogram_multizone_config_structure))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = VL53L1_init_histogram_multizone_config_structure
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_special_histogram_short_range
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_xtalk_planar
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_xtalk_mm1
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_short_range_mm1
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_short_range
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging_with_mm1
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging_short_timing
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging_mm1_cal
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_medium_range_mm1
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_medium_range
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_long_range_mm1
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_long_range
</UL>

<P><STRONG><a name="[125]"></a>VL53L1_init_ll_driver_state</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, vl53l1_core.o(.text.VL53L1_init_ll_driver_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1_init_ll_driver_state
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_stop_range
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_poll_for_boot_completion
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[12d]"></a>VL53L1_init_offset_cal_config_struct</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_init_offset_cal_config_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_init_offset_cal_config_struct
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[129]"></a>VL53L1_init_refspadchar_config_struct</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_init_refspadchar_config_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_init_refspadchar_config_struct
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[12a]"></a>VL53L1_init_ssc_config_struct</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_init_ssc_config_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_init_ssc_config_struct
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[189]"></a>VL53L1_init_system_results</STRONG> (Thumb, 112 bytes, Stack size 4 bytes, vl53l1_core.o(.text.VL53L1_init_system_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = VL53L1_init_system_results
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_copy_results_to_sys_and_core
</UL>

<P><STRONG><a name="[131]"></a>VL53L1_init_tuning_parm_storage_struct</STRONG> (Thumb, 792 bytes, Stack size 24 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_init_tuning_parm_storage_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53L1_init_tuning_parm_storage_struct
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[126]"></a>VL53L1_init_version</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, vl53l1_core.o(.text.VL53L1_init_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_init_version
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[133]"></a>VL53L1_init_xtalk_bin_data_struct</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, vl53l1_core.o(.text.VL53L1_init_xtalk_bin_data_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = VL53L1_init_xtalk_bin_data_struct
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[12b]"></a>VL53L1_init_xtalk_config_struct</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_init_xtalk_config_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = VL53L1_init_xtalk_config_struct &rArr; VL53L1_calc_range_ignore_threshold
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_range_ignore_threshold
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[12c]"></a>VL53L1_init_xtalk_extract_config_struct</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_init_xtalk_extract_config_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_init_xtalk_extract_config_struct
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[12e]"></a>VL53L1_init_zone_cal_config_struct</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_init_zone_cal_config_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_init_zone_cal_config_struct
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[1a2]"></a>VL53L1_init_zone_config_histogram_bins</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, vl53l1_zone_presets.o(.text.VL53L1_init_zone_config_histogram_bins))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_init_zone_config_histogram_bins
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_zone_preset_xtalk_planar
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_zone_config_structure
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_zone_config
</UL>

<P><STRONG><a name="[1a1]"></a>VL53L1_init_zone_config_structure</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, vl53l1_zone_presets.o(.text.VL53L1_init_zone_config_structure))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_init_zone_config_structure &rArr; VL53L1_init_zone_config_histogram_bins
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_zone_config_histogram_bins
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_multizone_short_range
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_multizone_long_range
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_multizone
</UL>

<P><STRONG><a name="[172]"></a>VL53L1_ipp_hist_process_data</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, vl53l1_platform_ipp.o(.text.VL53L1_ipp_hist_process_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = VL53L1_ipp_hist_process_data &rArr; VL53L1_hist_process_data &rArr; VL53L1_f_033 &rArr; VL53L1_f_026 &rArr; VL53L1_f_014 &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_process_data
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
</UL>

<P><STRONG><a name="[120]"></a>VL53L1_is_aperture_location</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, vl53l1_core.o(.text.VL53L1_is_aperture_location))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_is_aperture_location
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_mm_effective_spads
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_max_effective_spads
</UL>

<P><STRONG><a name="[e7]"></a>VL53L1_is_new_data_ready</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, vl53l1_wait.o(.text.VL53L1_is_new_data_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = VL53L1_is_new_data_ready &rArr; VL53L1_RdByte &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_RdByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_wait_for_test_completion
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetMeasurementDataReady
</UL>

<P><STRONG><a name="[147]"></a>VL53L1_isqrt</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, vl53l1_core_support.o(.text.VL53L1_isqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_isqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_018
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_014
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_002
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_001
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_estimate_ambient_from_thresholded_bins
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_hist_events_consistency_check
</UL>

<P><STRONG><a name="[106]"></a>VL53L1_load_patch</STRONG> (Thumb, 378 bytes, Stack size 288 bytes, vl53l1_api_core.o(.text.VL53L1_load_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = VL53L1_load_patch &rArr; VL53L1_enable_powerforce &rArr; VL53L1_set_powerforce_register &rArr; VL53L1_WrByte &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_enable_powerforce
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_tuning_parm
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WriteMulti
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_StartMeasurement
</UL>

<P><STRONG><a name="[fd]"></a>VL53L1_low_power_auto_data_init</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, vl53l1_core.o(.text.VL53L1_low_power_auto_data_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_low_power_auto_data_init
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetPresetMode
</UL>

<P><STRONG><a name="[1e3]"></a>VL53L1_low_power_auto_data_stop_range</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, vl53l1_core.o(.text.VL53L1_low_power_auto_data_stop_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_low_power_auto_data_stop_range
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_stop_range
</UL>

<P><STRONG><a name="[17b]"></a>VL53L1_low_power_auto_setup_manual_calibration</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, vl53l1_core.o(.text.VL53L1_low_power_auto_setup_manual_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_low_power_auto_setup_manual_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
</UL>

<P><STRONG><a name="[178]"></a>VL53L1_multizone_hist_bins_update</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, vl53l1_core.o(.text.VL53L1_multizone_hist_bins_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = VL53L1_multizone_hist_bins_update &rArr; VL53L1_copy_hist_bins_to_static_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_copy_hist_bins_to_static_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
</UL>

<P><STRONG><a name="[1a4]"></a>VL53L1_nvm_decode_additional_offset_cal_data</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, vl53l1_nvm.o(.text.VL53L1_nvm_decode_additional_offset_cal_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = VL53L1_nvm_decode_additional_offset_cal_data &rArr; VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_nvm_additional_offset_cal_data
</UL>

<P><STRONG><a name="[1a5]"></a>VL53L1_nvm_decode_cal_peak_rate_map</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, vl53l1_nvm.o(.text.VL53L1_nvm_decode_cal_peak_rate_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = VL53L1_nvm_decode_cal_peak_rate_map &rArr; VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_nvm_cal_peak_rate_map
</UL>

<P><STRONG><a name="[1a6]"></a>VL53L1_nvm_decode_fmt_range_results_data</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, vl53l1_nvm.o(.text.VL53L1_nvm_decode_fmt_range_results_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = VL53L1_nvm_decode_fmt_range_results_data &rArr; VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_nvm_fmt_range_results_data
</UL>

<P><STRONG><a name="[1da]"></a>VL53L1_nvm_decode_optical_centre</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, vl53l1_nvm.o(.text.VL53L1_nvm_decode_optical_centre))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1_nvm_decode_optical_centre
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_nvm_optical_centre
</UL>

<P><STRONG><a name="[1a7]"></a>VL53L1_nvm_disable</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, vl53l1_nvm.o(.text.VL53L1_nvm_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = VL53L1_nvm_disable &rArr; VL53L1_enable_firmware &rArr; VL53L1_set_firmware_enable_register &rArr; VL53L1_WrByte &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_enable_firmware
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_disable_powerforce
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_nvm_raw_data
</UL>

<P><STRONG><a name="[1a8]"></a>VL53L1_nvm_enable</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, vl53l1_nvm.o(.text.VL53L1_nvm_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = VL53L1_nvm_enable &rArr; VL53L1_disable_firmware &rArr; VL53L1_set_firmware_enable_register &rArr; VL53L1_WrByte &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_disable_firmware
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_enable_powerforce
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitUs
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WrByte
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WrWord
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_nvm_raw_data
</UL>

<P><STRONG><a name="[1a9]"></a>VL53L1_nvm_read</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, vl53l1_nvm.o(.text.VL53L1_nvm_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = VL53L1_nvm_read &rArr; VL53L1_ReadMulti &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitUs
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ReadMulti
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_nvm_raw_data
</UL>

<P><STRONG><a name="[10a]"></a>VL53L1_poll_for_boot_completion</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, vl53l1_wait.o(.text.VL53L1_poll_for_boot_completion))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = VL53L1_poll_for_boot_completion &rArr; VL53L1_WaitValueMaskEx &rArr; VL53L1_RdByte &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_ll_driver_state
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitUs
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitValueMaskEx
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitDeviceBooted
</UL>

<P><STRONG><a name="[1aa]"></a>VL53L1_poll_for_range_completion</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, vl53l1_wait.o(.text.VL53L1_poll_for_range_completion))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = VL53L1_poll_for_range_completion &rArr; VL53L1_WaitValueMaskEx &rArr; VL53L1_RdByte &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitValueMaskEx
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_wait_for_test_completion
</UL>

<P><STRONG><a name="[1ab]"></a>VL53L1_preset_mode_histogram_characterisation</STRONG> (Thumb, 128 bytes, Stack size 64 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_histogram_characterisation))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = VL53L1_preset_mode_histogram_characterisation &rArr; VL53L1_preset_mode_histogram_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1ad]"></a>VL53L1_preset_mode_histogram_long_range</STRONG> (Thumb, 398 bytes, Stack size 104 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_histogram_long_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = VL53L1_preset_mode_histogram_long_range &rArr; VL53L1_preset_mode_histogram_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_histogram_multizone_config_structure
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_histogram_config_structure
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_copy_hist_cfg_to_static_cfg
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_multizone_long_range
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_long_range_mm1
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1b1]"></a>VL53L1_preset_mode_histogram_long_range_mm1</STRONG> (Thumb, 268 bytes, Stack size 112 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_histogram_long_range_mm1))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = VL53L1_preset_mode_histogram_long_range_mm1 &rArr; VL53L1_preset_mode_histogram_long_range &rArr; VL53L1_preset_mode_histogram_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_histogram_multizone_config_structure
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_histogram_config_structure
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_copy_hist_cfg_to_static_cfg
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_long_range
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_long_range_mm2
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1b2]"></a>VL53L1_preset_mode_histogram_long_range_mm2</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_histogram_long_range_mm2))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = VL53L1_preset_mode_histogram_long_range_mm2 &rArr; VL53L1_preset_mode_histogram_long_range_mm1 &rArr; VL53L1_preset_mode_histogram_long_range &rArr; VL53L1_preset_mode_histogram_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_long_range_mm1
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1b3]"></a>VL53L1_preset_mode_histogram_medium_range</STRONG> (Thumb, 378 bytes, Stack size 104 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_histogram_medium_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = VL53L1_preset_mode_histogram_medium_range &rArr; VL53L1_preset_mode_histogram_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_histogram_multizone_config_structure
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_histogram_config_structure
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_copy_hist_cfg_to_static_cfg
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_multizone
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_medium_range_mm1
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1b4]"></a>VL53L1_preset_mode_histogram_medium_range_mm1</STRONG> (Thumb, 260 bytes, Stack size 104 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_histogram_medium_range_mm1))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = VL53L1_preset_mode_histogram_medium_range_mm1 &rArr; VL53L1_preset_mode_histogram_medium_range &rArr; VL53L1_preset_mode_histogram_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_histogram_multizone_config_structure
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_histogram_config_structure
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_copy_hist_cfg_to_static_cfg
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_medium_range
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_medium_range_mm2
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1b5]"></a>VL53L1_preset_mode_histogram_medium_range_mm2</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_histogram_medium_range_mm2))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = VL53L1_preset_mode_histogram_medium_range_mm2 &rArr; VL53L1_preset_mode_histogram_medium_range_mm1 &rArr; VL53L1_preset_mode_histogram_medium_range &rArr; VL53L1_preset_mode_histogram_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_medium_range_mm1
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1b6]"></a>VL53L1_preset_mode_histogram_multizone</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_histogram_multizone))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = VL53L1_preset_mode_histogram_multizone &rArr; VL53L1_preset_mode_histogram_medium_range &rArr; VL53L1_preset_mode_histogram_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_histogram_multizone_initial_bin_config
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_copy_hist_cfg_to_static_cfg
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_medium_range
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_zone_config_structure
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1b8]"></a>VL53L1_preset_mode_histogram_multizone_long_range</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_histogram_multizone_long_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = VL53L1_preset_mode_histogram_multizone_long_range &rArr; VL53L1_preset_mode_histogram_long_range &rArr; VL53L1_preset_mode_histogram_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_histogram_multizone_initial_bin_config
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_copy_hist_cfg_to_static_cfg
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_long_range
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_zone_config_structure
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_xtalk_planar
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1b9]"></a>VL53L1_preset_mode_histogram_multizone_short_range</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_histogram_multizone_short_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = VL53L1_preset_mode_histogram_multizone_short_range &rArr; VL53L1_preset_mode_histogram_short_range &rArr; VL53L1_preset_mode_histogram_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_histogram_multizone_initial_bin_config
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_copy_hist_cfg_to_static_cfg
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_short_range
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_zone_config_structure
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1ac]"></a>VL53L1_preset_mode_histogram_ranging</STRONG> (Thumb, 368 bytes, Stack size 104 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_histogram_ranging))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = VL53L1_preset_mode_histogram_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_histogram_multizone_config_structure
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_histogram_config_structure
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_copy_hist_cfg_to_static_cfg
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_xtalk_mm1
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_short_range
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging_with_mm1
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging_short_timing
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging_ref
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging_mm1_cal
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_medium_range
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_long_range
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_characterisation
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1bc]"></a>VL53L1_preset_mode_histogram_ranging_mm1_cal</STRONG> (Thumb, 280 bytes, Stack size 104 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_histogram_ranging_mm1_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = VL53L1_preset_mode_histogram_ranging_mm1_cal &rArr; VL53L1_preset_mode_histogram_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_histogram_multizone_config_structure
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_histogram_config_structure
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_copy_hist_cfg_to_static_cfg
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging_mm2_cal
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1bd]"></a>VL53L1_preset_mode_histogram_ranging_mm2_cal</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_histogram_ranging_mm2_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = VL53L1_preset_mode_histogram_ranging_mm2_cal &rArr; VL53L1_preset_mode_histogram_ranging_mm1_cal &rArr; VL53L1_preset_mode_histogram_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging_mm1_cal
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1be]"></a>VL53L1_preset_mode_histogram_ranging_ref</STRONG> (Thumb, 134 bytes, Stack size 64 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_histogram_ranging_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = VL53L1_preset_mode_histogram_ranging_ref &rArr; VL53L1_preset_mode_histogram_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_copy_hist_cfg_to_static_cfg
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1bf]"></a>VL53L1_preset_mode_histogram_ranging_short_timing</STRONG> (Thumb, 354 bytes, Stack size 112 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_histogram_ranging_short_timing))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = VL53L1_preset_mode_histogram_ranging_short_timing &rArr; VL53L1_preset_mode_histogram_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_histogram_multizone_config_structure
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_histogram_config_structure
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_copy_hist_cfg_to_static_cfg
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1c0]"></a>VL53L1_preset_mode_histogram_ranging_with_mm1</STRONG> (Thumb, 274 bytes, Stack size 112 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_histogram_ranging_with_mm1))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = VL53L1_preset_mode_histogram_ranging_with_mm1 &rArr; VL53L1_preset_mode_histogram_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_histogram_multizone_config_structure
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_histogram_config_structure
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_copy_hist_cfg_to_static_cfg
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging_with_mm2
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1c1]"></a>VL53L1_preset_mode_histogram_ranging_with_mm2</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_histogram_ranging_with_mm2))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = VL53L1_preset_mode_histogram_ranging_with_mm2 &rArr; VL53L1_preset_mode_histogram_ranging_with_mm1 &rArr; VL53L1_preset_mode_histogram_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging_with_mm1
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1ba]"></a>VL53L1_preset_mode_histogram_short_range</STRONG> (Thumb, 354 bytes, Stack size 104 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_histogram_short_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = VL53L1_preset_mode_histogram_short_range &rArr; VL53L1_preset_mode_histogram_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_histogram_multizone_config_structure
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_histogram_config_structure
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_copy_hist_cfg_to_static_cfg
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_special_histogram_short_range
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_short_range_mm1
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_multizone_short_range
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1c2]"></a>VL53L1_preset_mode_histogram_short_range_mm1</STRONG> (Thumb, 238 bytes, Stack size 104 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_histogram_short_range_mm1))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = VL53L1_preset_mode_histogram_short_range_mm1 &rArr; VL53L1_preset_mode_histogram_short_range &rArr; VL53L1_preset_mode_histogram_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_histogram_multizone_config_structure
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_histogram_config_structure
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_copy_hist_cfg_to_static_cfg
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_short_range
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_short_range_mm2
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1c3]"></a>VL53L1_preset_mode_histogram_short_range_mm2</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_histogram_short_range_mm2))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = VL53L1_preset_mode_histogram_short_range_mm2 &rArr; VL53L1_preset_mode_histogram_short_range_mm1 &rArr; VL53L1_preset_mode_histogram_short_range &rArr; VL53L1_preset_mode_histogram_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_short_range_mm1
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1c4]"></a>VL53L1_preset_mode_histogram_xtalk_mm1</STRONG> (Thumb, 358 bytes, Stack size 104 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_histogram_xtalk_mm1))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = VL53L1_preset_mode_histogram_xtalk_mm1 &rArr; VL53L1_preset_mode_histogram_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_histogram_multizone_config_structure
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_histogram_config_structure
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_copy_hist_cfg_to_static_cfg
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_xtalk_mm2
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1c5]"></a>VL53L1_preset_mode_histogram_xtalk_mm2</STRONG> (Thumb, 102 bytes, Stack size 64 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_histogram_xtalk_mm2))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = VL53L1_preset_mode_histogram_xtalk_mm2 &rArr; VL53L1_preset_mode_histogram_xtalk_mm1 &rArr; VL53L1_preset_mode_histogram_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_xtalk_mm1
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1c6]"></a>VL53L1_preset_mode_histogram_xtalk_planar</STRONG> (Thumb, 316 bytes, Stack size 104 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_histogram_xtalk_planar))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = VL53L1_preset_mode_histogram_xtalk_planar &rArr; VL53L1_preset_mode_histogram_multizone_long_range &rArr; VL53L1_preset_mode_histogram_long_range &rArr; VL53L1_preset_mode_histogram_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_histogram_multizone_initial_bin_config
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_histogram_multizone_config_structure
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_histogram_config_structure
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_copy_hist_cfg_to_static_cfg
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_zone_preset_xtalk_planar
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_multizone_long_range
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1c8]"></a>VL53L1_preset_mode_low_power_auto_long_ranging</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_low_power_auto_long_ranging))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = VL53L1_preset_mode_low_power_auto_long_ranging &rArr; VL53L1_preset_mode_timed_ranging_long_range &rArr; VL53L1_preset_mode_standard_ranging_long_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_config_low_power_auto_mode
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging_long_range
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1cb]"></a>VL53L1_preset_mode_low_power_auto_ranging</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_low_power_auto_ranging))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = VL53L1_preset_mode_low_power_auto_ranging &rArr; VL53L1_preset_mode_timed_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_config_low_power_auto_mode
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1cd]"></a>VL53L1_preset_mode_low_power_auto_short_ranging</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_low_power_auto_short_ranging))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = VL53L1_preset_mode_low_power_auto_short_ranging &rArr; VL53L1_preset_mode_timed_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_config_low_power_auto_mode
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging_short_range
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1cf]"></a>VL53L1_preset_mode_olt</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_olt))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = VL53L1_preset_mode_olt &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1d0]"></a>VL53L1_preset_mode_singleshot_ranging</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_singleshot_ranging))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = VL53L1_preset_mode_singleshot_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1d1]"></a>VL53L1_preset_mode_special_histogram_short_range</STRONG> (Thumb, 282 bytes, Stack size 96 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_special_histogram_short_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = VL53L1_preset_mode_special_histogram_short_range &rArr; VL53L1_preset_mode_histogram_short_range &rArr; VL53L1_preset_mode_histogram_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_histogram_multizone_config_structure
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_histogram_config_structure
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_copy_hist_cfg_to_static_cfg
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_short_range
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1bb]"></a>VL53L1_preset_mode_standard_ranging</STRONG> (Thumb, 840 bytes, Stack size 60 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_standard_ranging))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_short_range
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_mm2_cal
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_mm1_cal
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_long_range
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_singleshot_ranging
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_olt
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1d2]"></a>VL53L1_preset_mode_standard_ranging_long_range</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_standard_ranging_long_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = VL53L1_preset_mode_standard_ranging_long_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging_long_range
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1d3]"></a>VL53L1_preset_mode_standard_ranging_mm1_cal</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_standard_ranging_mm1_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = VL53L1_preset_mode_standard_ranging_mm1_cal &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1d4]"></a>VL53L1_preset_mode_standard_ranging_mm2_cal</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_standard_ranging_mm2_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = VL53L1_preset_mode_standard_ranging_mm2_cal &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1d5]"></a>VL53L1_preset_mode_standard_ranging_short_range</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_standard_ranging_short_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging_short_range
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1cc]"></a>VL53L1_preset_mode_timed_ranging</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_timed_ranging))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = VL53L1_preset_mode_timed_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_ranging
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1c9]"></a>VL53L1_preset_mode_timed_ranging_long_range</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_timed_ranging_long_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = VL53L1_preset_mode_timed_ranging_long_range &rArr; VL53L1_preset_mode_standard_ranging_long_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_long_range
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_long_ranging
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1ce]"></a>VL53L1_preset_mode_timed_ranging_short_range</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, vl53l1_api_preset_modes.o(.text.VL53L1_preset_mode_timed_ranging_short_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = VL53L1_preset_mode_timed_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_short_range
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_short_ranging
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[14f]"></a>VL53L1_range_maths</STRONG> (Thumb, 350 bytes, Stack size 48 bytes, vl53l1_core_support.o(.text.VL53L1_range_maths))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VL53L1_range_maths &rArr; VL53L1_calc_pll_period_us
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_pll_period_us
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_012
</UL>

<P><STRONG><a name="[146]"></a>VL53L1_rate_maths</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, vl53l1_core_support.o(.text.VL53L1_rate_maths))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = VL53L1_rate_maths
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_011
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_001
</UL>

<P><STRONG><a name="[14d]"></a>VL53L1_rate_per_spad_maths</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, vl53l1_core_support.o(.text.VL53L1_rate_per_spad_maths))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53L1_rate_per_spad_maths
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_f_011
</UL>

<P><STRONG><a name="[1d6]"></a>VL53L1_read_nvm_additional_offset_cal_data</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, vl53l1_nvm.o(.text.VL53L1_read_nvm_additional_offset_cal_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = VL53L1_read_nvm_additional_offset_cal_data &rArr; VL53L1_read_nvm_raw_data &rArr; VL53L1_nvm_enable &rArr; VL53L1_disable_firmware &rArr; VL53L1_set_firmware_enable_register &rArr; VL53L1_WrByte &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_nvm_raw_data
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_decode_additional_offset_cal_data
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_p2p_data
</UL>

<P><STRONG><a name="[1d7]"></a>VL53L1_read_nvm_cal_peak_rate_map</STRONG> (Thumb, 66 bytes, Stack size 80 bytes, vl53l1_nvm.o(.text.VL53L1_read_nvm_cal_peak_rate_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = VL53L1_read_nvm_cal_peak_rate_map &rArr; VL53L1_read_nvm_raw_data &rArr; VL53L1_nvm_enable &rArr; VL53L1_disable_firmware &rArr; VL53L1_set_firmware_enable_register &rArr; VL53L1_WrByte &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_nvm_raw_data
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_decode_cal_peak_rate_map
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_p2p_data
</UL>

<P><STRONG><a name="[1d8]"></a>VL53L1_read_nvm_fmt_range_results_data</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, vl53l1_nvm.o(.text.VL53L1_read_nvm_fmt_range_results_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = VL53L1_read_nvm_fmt_range_results_data &rArr; VL53L1_read_nvm_raw_data &rArr; VL53L1_nvm_enable &rArr; VL53L1_disable_firmware &rArr; VL53L1_set_firmware_enable_register &rArr; VL53L1_WrByte &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_nvm_raw_data
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_decode_fmt_range_results_data
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_p2p_data
</UL>

<P><STRONG><a name="[1d9]"></a>VL53L1_read_nvm_optical_centre</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, vl53l1_nvm.o(.text.VL53L1_read_nvm_optical_centre))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = VL53L1_read_nvm_optical_centre &rArr; VL53L1_read_nvm_raw_data &rArr; VL53L1_nvm_enable &rArr; VL53L1_disable_firmware &rArr; VL53L1_set_firmware_enable_register &rArr; VL53L1_WrByte &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_nvm_raw_data
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_decode_optical_centre
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_p2p_data
</UL>

<P><STRONG><a name="[f1]"></a>VL53L1_read_nvm_raw_data</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, vl53l1_nvm.o(.text.VL53L1_read_nvm_raw_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = VL53L1_read_nvm_raw_data &rArr; VL53L1_nvm_enable &rArr; VL53L1_disable_firmware &rArr; VL53L1_set_firmware_enable_register &rArr; VL53L1_WrByte &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_read
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_nvm_optical_centre
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_nvm_fmt_range_results_data
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_nvm_cal_peak_rate_map
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_nvm_additional_offset_cal_data
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_PerformRefSpadManagement
</UL>

<P><STRONG><a name="[128]"></a>VL53L1_read_p2p_data</STRONG> (Thumb, 568 bytes, Stack size 64 bytes, vl53l1_api_core.o(.text.VL53L1_read_p2p_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = VL53L1_read_p2p_data &rArr; VL53L1_read_nvm_cal_peak_rate_map &rArr; VL53L1_read_nvm_raw_data &rArr; VL53L1_nvm_enable &rArr; VL53L1_disable_firmware &rArr; VL53L1_set_firmware_enable_register &rArr; VL53L1_WrByte &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_nvm_optical_centre
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_nvm_fmt_range_results_data
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_nvm_cal_peak_rate_map
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_nvm_additional_offset_cal_data
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_static_nvm_managed
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_nvm_copy_data
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_mode_mitigation_roi
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_customer_nvm_managed
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_copy_rtn_good_spads_to_buffer
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_mm_effective_spads
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_RdWord
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[1db]"></a>VL53L1_run_device_test</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, vl53l1_api_calibration.o(.text.VL53L1_run_device_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = VL53L1_run_device_test &rArr; VL53L1_wait_for_test_completion &rArr; VL53L1_poll_for_range_completion &rArr; VL53L1_WaitValueMaskEx &rArr; VL53L1_RdByte &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_wait_for_test_completion
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_start_test
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_clear_interrupt
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ReadMulti
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_RdByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_run_ref_spad_char
</UL>

<P><STRONG><a name="[ef]"></a>VL53L1_run_ref_spad_char</STRONG> (Thumb, 478 bytes, Stack size 64 bytes, vl53l1_api_calibration.o(.text.VL53L1_run_ref_spad_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = VL53L1_run_ref_spad_char &rArr; VL53L1_run_device_test &rArr; VL53L1_wait_for_test_completion &rArr; VL53L1_poll_for_range_completion &rArr; VL53L1_WaitValueMaskEx &rArr; VL53L1_RdByte &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_ref_spad_char_config
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_run_device_test
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_enable_powerforce
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ReadMulti
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WriteMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_PerformRefSpadManagement
</UL>

<P><STRONG><a name="[19c]"></a>VL53L1_save_cfg_data</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, vl53l1_core.o(.text.VL53L1_save_cfg_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53L1_save_cfg_data
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[e1]"></a>VL53L1_set_dmax_mode</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, vl53l1_api_core.o(.text.VL53L1_set_dmax_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_set_dmax_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_DataInit
</UL>

<P><STRONG><a name="[139]"></a>VL53L1_set_firmware_enable_register</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, vl53l1_core.o(.text.VL53L1_set_firmware_enable_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = VL53L1_set_firmware_enable_register &rArr; VL53L1_WrByte &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_enable_firmware
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_disable_firmware
</UL>

<P><STRONG><a name="[1b7]"></a>VL53L1_set_histogram_multizone_initial_bin_config</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, vl53l1_core.o(.text.VL53L1_set_histogram_multizone_initial_bin_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1_set_histogram_multizone_initial_bin_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_xtalk_planar
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_multizone_short_range
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_multizone_long_range
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_multizone
</UL>

<P><STRONG><a name="[fc]"></a>VL53L1_set_inter_measurement_period_ms</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, vl53l1_api_core.o(.text.VL53L1_set_inter_measurement_period_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1_set_inter_measurement_period_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetInterMeasurementPeriodMilliSeconds
</UL>

<P><STRONG><a name="[bf]"></a>VL53L1_set_lite_min_count_rate</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, vl53l1_api_core.o(.text.VL53L1_set_lite_min_count_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_set_lite_min_count_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLimitValue
</UL>

<P><STRONG><a name="[be]"></a>VL53L1_set_lite_sigma_threshold</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, vl53l1_api_core.o(.text.VL53L1_set_lite_sigma_threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_set_lite_sigma_threshold
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLimitValue
</UL>

<P><STRONG><a name="[13b]"></a>VL53L1_set_powerforce_register</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, vl53l1_core.o(.text.VL53L1_set_powerforce_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = VL53L1_set_powerforce_register &rArr; VL53L1_WrByte &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_enable_powerforce
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_disable_powerforce
</UL>

<P><STRONG><a name="[c5]"></a>VL53L1_set_preset_mode</STRONG> (Thumb, 2238 bytes, Stack size 112 bytes, vl53l1_api_core.o(.text.VL53L1_set_preset_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = VL53L1_set_preset_mode &rArr; VL53L1_preset_mode_histogram_long_range_mm2 &rArr; VL53L1_preset_mode_histogram_long_range_mm1 &rArr; VL53L1_preset_mode_histogram_long_range &rArr; VL53L1_preset_mode_histogram_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging_short_range
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging_long_range
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_short_range
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_mm2_cal
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_mm1_cal
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_long_range
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_special_histogram_short_range
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_singleshot_ranging
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_olt
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_short_ranging
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_ranging
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_long_ranging
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_xtalk_planar
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_xtalk_mm2
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_xtalk_mm1
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_short_range_mm2
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_short_range_mm1
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_short_range
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging_with_mm2
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging_with_mm1
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging_short_timing
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging_ref
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging_mm2_cal
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging_mm1_cal
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_ranging
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_multizone_short_range
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_multizone_long_range
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_multizone
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_medium_range_mm2
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_medium_range_mm1
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_medium_range
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_long_range_mm2
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_long_range_mm1
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_long_range
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_characterisation
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_ll_driver_state
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V53L1_init_zone_results_structure
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_timeouts_us
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_inter_measurement_period_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPresetMode
</UL>

<P><STRONG><a name="[1de]"></a>VL53L1_set_ref_spad_char_config</STRONG> (Thumb, 350 bytes, Stack size 56 bytes, vl53l1_core.o(.text.VL53L1_set_ref_spad_char_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = VL53L1_set_ref_spad_char_config &rArr; VL53L1_WriteMulti &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_macro_period_us
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WriteMulti
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WrByte
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WrWord
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_run_ref_spad_char
</UL>

<P><STRONG><a name="[1e0]"></a>VL53L1_set_system_control</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(.text.VL53L1_set_system_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = VL53L1_set_system_control &rArr; VL53L1_WriteMulti &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_system_control
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WriteMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_stop_range
</UL>

<P><STRONG><a name="[f9]"></a>VL53L1_set_timeouts_us</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, vl53l1_api_core.o(.text.VL53L1_set_timeouts_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = VL53L1_set_timeouts_us &rArr; VL53L1_calc_timeout_register_values &rArr; VL53L1_calc_encoded_timeout &rArr; VL53L1_encode_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_timeout_register_values
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetDistanceMode
</UL>

<P><STRONG><a name="[19a]"></a>VL53L1_set_user_zone</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, vl53l1_api_core.o(.text.VL53L1_set_user_zone))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53L1_set_user_zone &rArr; VL53L1_encode_zone_size
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_encode_zone_size
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_encode_row_col
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[fa]"></a>VL53L1_set_zone_config</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, vl53l1_api_core.o(.text.VL53L1_set_zone_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53L1_set_zone_config &rArr; VL53L1_init_zone_config_histogram_bins
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_zone_config_histogram_bins
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetROI
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetDistanceMode
</UL>

<P><STRONG><a name="[19b]"></a>VL53L1_set_zone_dss_config</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, vl53l1_api_core.o(.text.VL53L1_set_zone_dss_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = VL53L1_set_zone_dss_config
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[11f]"></a>VL53L1_spad_number_to_byte_bit_index</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, vl53l1_core.o(.text.VL53L1_spad_number_to_byte_bit_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1_spad_number_to_byte_bit_index
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_mm_effective_spads
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_max_effective_spads
</UL>

<P><STRONG><a name="[1dc]"></a>VL53L1_start_test</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, vl53l1_core.o(.text.VL53L1_start_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = VL53L1_start_test &rArr; VL53L1_WrByte &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_run_device_test
</UL>

<P><STRONG><a name="[108]"></a>VL53L1_stop_range</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, vl53l1_api_core.o(.text.VL53L1_stop_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = VL53L1_stop_range &rArr; VL53L1_set_system_control &rArr; VL53L1_WriteMulti &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_system_control
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_low_power_auto_data_stop_range
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_ll_driver_state
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V53L1_init_zone_results_structure
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V53L1_init_zone_dss_configs
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_StopMeasurement
</UL>

<P><STRONG><a name="[109]"></a>VL53L1_unload_patch</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, vl53l1_api_core.o(.text.VL53L1_unload_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = VL53L1_unload_patch &rArr; VL53L1_disable_powerforce &rArr; VL53L1_set_powerforce_register &rArr; VL53L1_WrByte &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_disable_powerforce
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_StopMeasurement
</UL>

<P><STRONG><a name="[1e4]"></a>VL53L1_update_internal_stream_counters</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, vl53l1_core.o(.text.VL53L1_update_internal_stream_counters))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53L1_update_internal_stream_counters
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_update_ll_driver_rd_state
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_update_ll_driver_cfg_state
</UL>

<P><STRONG><a name="[19f]"></a>VL53L1_update_ll_driver_cfg_state</STRONG> (Thumb, 562 bytes, Stack size 48 bytes, vl53l1_core.o(.text.VL53L1_update_ll_driver_cfg_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = VL53L1_update_ll_driver_cfg_state &rArr; VL53L1_update_internal_stream_counters
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_update_internal_stream_counters
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[19e]"></a>VL53L1_update_ll_driver_rd_state</STRONG> (Thumb, 432 bytes, Stack size 32 bytes, vl53l1_core.o(.text.VL53L1_update_ll_driver_rd_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VL53L1_update_ll_driver_rd_state &rArr; VL53L1_update_internal_stream_counters
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_update_internal_stream_counters
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[1dd]"></a>VL53L1_wait_for_test_completion</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, vl53l1_wait.o(.text.VL53L1_wait_for_test_completion))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = VL53L1_wait_for_test_completion &rArr; VL53L1_poll_for_range_completion &rArr; VL53L1_WaitValueMaskEx &rArr; VL53L1_RdByte &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_poll_for_range_completion
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_is_new_data_ready
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitMs
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_run_device_test
</UL>

<P><STRONG><a name="[134]"></a>VL53L1_xtalk_cal_data_init</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, vl53l1_core.o(.text.VL53L1_xtalk_cal_data_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_xtalk_cal_data_init
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[1c7]"></a>VL53L1_zone_preset_xtalk_planar</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, vl53l1_zone_presets.o(.text.VL53L1_zone_preset_xtalk_planar))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53L1_zone_preset_xtalk_planar &rArr; VL53L1_init_zone_config_histogram_bins
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_zone_config_histogram_bins
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_histogram_xtalk_planar
</UL>

<P><STRONG><a name="[f5]"></a>_I2CRead</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, vl53l1_platform.o(.text._I2CRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _I2CRead
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_RdWord
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ReadMulti
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_RdByte
</UL>

<P><STRONG><a name="[f4]"></a>_I2CWrite</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, vl53l1_platform.o(.text._I2CWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _I2CWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_RdWord
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ReadMulti
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_RdByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WriteMulti
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WrByte
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WrWord
</UL>

<P><STRONG><a name="[4a]"></a>fputc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_nucleo.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[42]"></a>main</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = main &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOF_Process
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOF_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1e7]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1fc]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1fd]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1fe]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[b6]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_result
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_VL53L1CB_SimpleRanging_Init
</UL>

<P><STRONG><a name="[1ff]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[200]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[201]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[af]"></a>MX_GPIO_Init</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, main.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_GPIO_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>MX_RTC_Init</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, main.o(.text.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_RTC_Init &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>VL53L1CB_Probe</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, custom_ranging_sensor.o(.text.VL53L1CB_Probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = VL53L1CB_Probe &rArr; VL53L1CB_ReadID &rArr; VL53L1_RdWord &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1CB_RegisterBusIO
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1CB_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_RANGING_SENSOR_Init
</UL>

<P><STRONG><a name="[79]"></a>reset_device</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, custom_ranging_sensor.o(.text.reset_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = reset_device &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_RANGING_SENSOR_Init
</UL>

<P><STRONG><a name="[b3]"></a>MX_VL53L1CB_SimpleRanging_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, app_tof.o(.text.MX_VL53L1CB_SimpleRanging_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MX_VL53L1CB_SimpleRanging_Init &rArr; CUSTOM_RANGING_SENSOR_Init &rArr; VL53L1CB_Probe &rArr; VL53L1CB_ReadID &rArr; VL53L1_RdWord &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_RANGING_SENSOR_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOF_Init
</UL>

<P><STRONG><a name="[b5]"></a>MX_VL53L1CB_SimpleRanging_Process</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, app_tof.o(.text.MX_VL53L1CB_SimpleRanging_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_VL53L1CB_SimpleRanging_Process &rArr; print_result &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_result
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_RANGING_SENSOR_Start
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_RANGING_SENSOR_ReadID
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_RANGING_SENSOR_GetDistance
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_RANGING_SENSOR_GetCapabilities
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_RANGING_SENSOR_ConfigProfile
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOF_Process
</UL>

<P><STRONG><a name="[1e5]"></a>decimal_part</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, app_tof.o(.text.decimal_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = decimal_part
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_result
</UL>

<P><STRONG><a name="[bc]"></a>print_result</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, app_tof.o(.text.print_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = print_result &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decimal_part
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_VL53L1CB_SimpleRanging_Process
</UL>

<P><STRONG><a name="[70]"></a>I2C1_MspDeInit</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_nucleo_bus.o(.text.I2C1_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = I2C1_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_DeInit
</UL>

<P><STRONG><a name="[73]"></a>I2C1_MspInit</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, stm32f4xx_nucleo_bus.o(.text.I2C1_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = I2C1_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_Init
</UL>

<P><STRONG><a name="[6d]"></a>USART2_MspInit</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, stm32f4xx_nucleo.o(.text.USART2_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USART2_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
</UL>

<P><STRONG><a name="[7b]"></a>CheckAndChangeDistanceMode</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, vl53l1_api.o(.text.CheckAndChangeDistanceMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CheckAndChangeDistanceMode &rArr; GenNewPresetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenNewPresetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMeasurementData
</UL>

<P><STRONG><a name="[fe]"></a>CheckValidRectRoi</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, vl53l1_api.o(.text.CheckValidRectRoi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckValidRectRoi
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetROI
</UL>

<P><STRONG><a name="[c3]"></a>ComputeDevicePresetMode</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, vl53l1_api.o(.text.ComputeDevicePresetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ComputeDevicePresetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPresetMode
</UL>

<P><STRONG><a name="[c6]"></a>ComputeRQL</STRONG> (Thumb, 328 bytes, Stack size 56 bytes, vl53l1_api.o(.text.ComputeRQL))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ComputeRQL
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTargetData
</UL>

<P><STRONG><a name="[c7]"></a>ConvertStatusHisto</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, vl53l1_api.o(.text.ConvertStatusHisto))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ConvertStatusHisto
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTargetData
</UL>

<P><STRONG><a name="[c8]"></a>ConvertStatusLite</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, vl53l1_api.o(.text.ConvertStatusLite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ConvertStatusLite
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTargetData
</UL>

<P><STRONG><a name="[7c]"></a>GenNewPresetMode</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, vl53l1_api.o(.text.GenNewPresetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GenNewPresetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAndChangeDistanceMode
</UL>

<P><STRONG><a name="[bd]"></a>SetLimitValue</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, vl53l1_api.o(.text.SetLimitValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SetLimitValue &rArr; VL53L1_set_lite_sigma_threshold
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_lite_sigma_threshold
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_lite_min_count_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetLimitCheckEnable
</UL>

<P><STRONG><a name="[c0]"></a>SetMeasurementData</STRONG> (Thumb, 526 bytes, Stack size 72 bytes, vl53l1_api.o(.text.SetMeasurementData))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SetMeasurementData &rArr; SetTargetData &rArr; VL53L1_GetLimitCheckValue &rArr; VL53L1_get_lite_sigma_threshold
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTargetData
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAndChangeDistanceMode
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetMultiRangingData
</UL>

<P><STRONG><a name="[c2]"></a>SetPresetMode</STRONG> (Thumb, 238 bytes, Stack size 64 bytes, vl53l1_api.o(.text.SetPresetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = SetPresetMode &rArr; VL53L1_set_preset_mode &rArr; VL53L1_preset_mode_histogram_long_range_mm2 &rArr; VL53L1_preset_mode_histogram_long_range_mm1 &rArr; VL53L1_preset_mode_histogram_long_range &rArr; VL53L1_preset_mode_histogram_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_preset_mode_timing_cfg
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeDevicePresetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetPresetMode
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetDistanceMode
</UL>

<P><STRONG><a name="[c1]"></a>SetTargetData</STRONG> (Thumb, 2166 bytes, Stack size 104 bytes, vl53l1_api.o(.text.SetTargetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SetTargetData &rArr; VL53L1_GetLimitCheckValue &rArr; VL53L1_get_lite_sigma_threshold
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_tuning_parm
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetLimitCheckValue
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetLimitCheckEnable
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertStatusLite
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertStatusHisto
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeRQL
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMeasurementData
</UL>

<P><STRONG><a name="[170]"></a>select_offset_per_vcsel</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, vl53l1_api_core.o(.text.select_offset_per_vcsel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = select_offset_per_vcsel
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
</UL>

<P><STRONG><a name="[1e6]"></a>vl53l1_diff_histo_stddev</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, vl53l1_api_core.o(.text.vl53l1_diff_histo_stddev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vl53l1_diff_histo_stddev
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l1_histo_merge
</UL>

<P><STRONG><a name="[17f]"></a>vl53l1_histo_merge</STRONG> (Thumb, 720 bytes, Stack size 56 bytes, vl53l1_api_core.o(.text.vl53l1_histo_merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vl53l1_histo_merge &rArr; vl53l1_diff_histo_stddev
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l1_diff_histo_stddev
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_tuning_parm
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_histogram_bin_data
</UL>

<P><STRONG><a name="[10c]"></a>VL53L1_Delay</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, vl53l1_platform.o(.text.VL53L1_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53L1_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitUs
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitMs
</UL>

<P><STRONG><a name="[d3]"></a>vl53l1cb_get_result</STRONG> (Thumb, 620 bytes, Stack size 32 bytes, vl53l1cb.o(.text.vl53l1cb_get_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = vl53l1cb_get_result &rArr; VL53L1_GetMultiRangingData &rArr; VL53L1_get_device_results &rArr; VL53L1_ipp_hist_process_data &rArr; VL53L1_hist_process_data &rArr; VL53L1_f_033 &rArr; VL53L1_f_026 &rArr; VL53L1_f_014 &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetMultiRangingData
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1CB_GetDistance
</UL>

<P><STRONG><a name="[d2]"></a>vl53l1cb_poll_for_measurement</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, vl53l1cb.o(.text.vl53l1cb_poll_for_measurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = vl53l1cb_poll_for_measurement &rArr; VL53L1_GetMeasurementDataReady &rArr; VL53L1_is_new_data_ready &rArr; VL53L1_RdByte &rArr; _I2CWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetMeasurementDataReady
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1CB_GetDistance
</UL>

<P><STRONG><a name="[ae]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32f4xx_hal_i2c.o(.text.I2C_IsAcknowledgeFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
</UL>

<P><STRONG><a name="[85]"></a>I2C_MasterRequestRead</STRONG> (Thumb, 426 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(.text.I2C_MasterRequestRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_MasterRequestRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[87]"></a>I2C_MasterRequestWrite</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(.text.I2C_MasterRequestWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[89]"></a>I2C_WaitOnBTFFlagUntilTimeout</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(.text.I2C_WaitOnBTFFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnBTFFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[84]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(.text.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestWrite
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestRead
</UL>

<P><STRONG><a name="[ad]"></a>I2C_WaitOnMasterAddressFlagUntilTimeout</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(.text.I2C_WaitOnMasterAddressFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestWrite
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestRead
</UL>

<P><STRONG><a name="[86]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(.text.I2C_WaitOnRXNEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[88]"></a>I2C_WaitOnTXEFlagUntilTimeout</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(.text.I2C_WaitOnTXEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnTXEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[93]"></a>NVIC_EncodePriority</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, stm32f4xx_hal_cortex.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[a5]"></a>SysTick_Config</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[91]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[92]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[94]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[95]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>

<P><STRONG><a name="[a8]"></a>UART_SetConfig</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[aa]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, stm32f4xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[1e9]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1e8]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[1ec]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1eb]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
